[{"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/index.js":"1","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/App.js":"2","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/utils/theme.js":"3","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/features/NavBar.js":"4","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/store.js":"5","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/locales/index.js":"6","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/Home/index.js":"7","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/locales/en.js":"8","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/locales/vi.js":"9","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/reducers/globalReducer.js":"10","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/constants/globalConstants.js":"11","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/reducers/orderReducers.js":"12","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/reducers/userReducers.js":"13","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/reducers/productReducers.js":"14","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/contexts/RedirectOpenContext.js":"15","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/contexts/ThemeContext.js":"16","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/contexts/AuthOpenContext.js":"17","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/contexts/CartOpenContext.js":"18","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/features/CopyRight.js":"19","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/features/CartBar.js":"20","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/features/AuthPopup.js":"21","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/features/RedirectBar.js":"22","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/Bookstore/index.js":"23","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/Product/index.js":"24","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/OrderProcess/index.js":"25","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/UnderConstruction/index.js":"26","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/Checkout/index.js":"27","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/PageNotFound/index.js":"28","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/AboutUs/index.js":"29","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/features/CartBar.styles.js":"30","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/features/NavBar.styles.js":"31","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/features/AuthPopup.styles.js":"32","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/constants/orderConstants.js":"33","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/constants/productConstants.js":"34","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/constants/userConstants.js":"35","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/Bookstore/Catalogue.js":"36","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/features/RedirectBar.styles.js":"37","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/actions/userActions.js":"38","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/actions/productActions.js":"39","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/AboutUs/styles.js":"40","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/Bookstore/Catalogue.styles.js":"41","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/utils/priceCalculator.js":"42","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/actions/orderActions.js":"43","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/Checkout/styles.js":"44","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/OrderProcess/FormComplete.js":"45","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/OrderProcess/FormPayment.js":"46","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/OrderProcess/FormShipping.js":"47","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/OrderProcess/styles.js":"48","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/OrderProcess/StripeInput.js":"49","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/utils/stripeAPI.js":"50","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/Product/styles.js":"51","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/Home/styles.js":"52","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/Bookstore/styles.js":"53"},{"size":286,"mtime":1614955198814,"results":"54","hashOfConfig":"55"},{"size":3298,"mtime":1614955198758,"results":"56","hashOfConfig":"55"},{"size":2326,"mtime":1614955198818,"results":"57","hashOfConfig":"55"},{"size":10310,"mtime":1614955198758,"results":"58","hashOfConfig":"55"},{"size":1729,"mtime":1614955198818,"results":"59","hashOfConfig":"55"},{"size":106,"mtime":1614955198814,"results":"60","hashOfConfig":"55"},{"size":14700,"mtime":1614955198762,"results":"61","hashOfConfig":"55"},{"size":6204,"mtime":1614955198814,"results":"62","hashOfConfig":"55"},{"size":7939,"mtime":1614955198814,"results":"63","hashOfConfig":"55"},{"size":401,"mtime":1614955198814,"results":"64","hashOfConfig":"55"},{"size":121,"mtime":1614955198766,"results":"65","hashOfConfig":"55"},{"size":2000,"mtime":1614955198814,"results":"66","hashOfConfig":"55"},{"size":838,"mtime":1614955198818,"results":"67","hashOfConfig":"55"},{"size":5624,"mtime":1614955198814,"results":"68","hashOfConfig":"55"},{"size":126,"mtime":1614955198766,"results":"69","hashOfConfig":"55"},{"size":134,"mtime":1614955198766,"results":"70","hashOfConfig":"55"},{"size":118,"mtime":1614955198766,"results":"71","hashOfConfig":"55"},{"size":118,"mtime":1614955198766,"results":"72","hashOfConfig":"55"},{"size":747,"mtime":1614955198758,"results":"73","hashOfConfig":"55"},{"size":9857,"mtime":1614955198758,"results":"74","hashOfConfig":"55"},{"size":14328,"mtime":1614955198758,"results":"75","hashOfConfig":"55"},{"size":3105,"mtime":1614955198758,"results":"76","hashOfConfig":"55"},{"size":7169,"mtime":1614955198762,"results":"77","hashOfConfig":"55"},{"size":13706,"mtime":1614955198762,"results":"78","hashOfConfig":"55"},{"size":4238,"mtime":1614955198762,"results":"79","hashOfConfig":"55"},{"size":1390,"mtime":1614955198762,"results":"80","hashOfConfig":"55"},{"size":23331,"mtime":1614955198762,"results":"81","hashOfConfig":"55"},{"size":2347,"mtime":1614955198762,"results":"82","hashOfConfig":"55"},{"size":10341,"mtime":1614955198758,"results":"83","hashOfConfig":"55"},{"size":3265,"mtime":1614955198758,"results":"84","hashOfConfig":"55"},{"size":839,"mtime":1614955198758,"results":"85","hashOfConfig":"55"},{"size":696,"mtime":1614955198758,"results":"86","hashOfConfig":"55"},{"size":362,"mtime":1614955198766,"results":"87","hashOfConfig":"55"},{"size":1388,"mtime":1614955198766,"results":"88","hashOfConfig":"55"},{"size":344,"mtime":1614955198766,"results":"89","hashOfConfig":"55"},{"size":11926,"mtime":1614955198758,"results":"90","hashOfConfig":"55"},{"size":1263,"mtime":1614955198758,"results":"91","hashOfConfig":"55"},{"size":1867,"mtime":1614955198758,"results":"92","hashOfConfig":"55"},{"size":3370,"mtime":1614955198754,"results":"93","hashOfConfig":"55"},{"size":3691,"mtime":1614955198758,"results":"94","hashOfConfig":"55"},{"size":1703,"mtime":1614955198758,"results":"95","hashOfConfig":"55"},{"size":3739,"mtime":1614955198818,"results":"96","hashOfConfig":"55"},{"size":1133,"mtime":1614955198754,"results":"97","hashOfConfig":"55"},{"size":5308,"mtime":1614955198762,"results":"98","hashOfConfig":"55"},{"size":981,"mtime":1614955198762,"results":"99","hashOfConfig":"55"},{"size":15578,"mtime":1614955198762,"results":"100","hashOfConfig":"55"},{"size":15150,"mtime":1614955198762,"results":"101","hashOfConfig":"55"},{"size":5869,"mtime":1614955198762,"results":"102","hashOfConfig":"55"},{"size":421,"mtime":1614955198762,"results":"103","hashOfConfig":"55"},{"size":667,"mtime":1614955198818,"results":"104","hashOfConfig":"55"},{"size":4313,"mtime":1614955198762,"results":"105","hashOfConfig":"55"},{"size":5875,"mtime":1614955198762,"results":"106","hashOfConfig":"55"},{"size":3305,"mtime":1614955198762,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},"1sfs4l6",{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"110"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"110"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"110"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"110"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"110"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"110"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"110"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"110"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"110"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"110"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"110"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"110"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"110"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"110"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/index.js",[],["229","230"],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/App.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/utils/theme.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/features/NavBar.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/store.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/locales/index.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/Home/index.js",["231","232"],"import React, { useContext, useEffect, useMemo, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormattedMessage } from 'react-intl';\nimport Swiper from 'react-id-swiper';\nimport clsx from 'clsx';\nimport useStyle from './styles';\nimport { \n    Box, Container, Hidden, Paper, Typography, IconButton, Avatar,\n    Card, CardMedia, CardContent, CardActions, Fade, Grid, \n} from \"@material-ui/core\";\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderOutlinedIcon from '@material-ui/icons/FavoriteBorderOutlined';\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\nimport ThemeContext from '../../../contexts/ThemeContext';\n\nimport { FONT_F_PLAYFAIR } from '../../../utils/theme';\nimport spinnerImage from '../../../images/infinitySpinner.gif';\nimport authorAvatar from '../../../images/author-avatar.jpg';\n\nimport CartOpenContext from '../../../contexts/CartOpenContext';\nimport { addToCart, getBestsellers, getRecommendeds } from '../../../actions/productActions';\n\nconst CARD_ITEM_HEIGHT = '450px';\nconst CARD_ITEM_WIDTH = '200px';\n\nconst CardItem = (props) => {\n    const classes = useStyle();\n    const history = useHistory();\n    const [isShown, setIsShown] = useState(false);\n    const { setCartOpen } = useContext(CartOpenContext);\n    const dispatch = useDispatch();\n    const item = props.item;\n    let priceDeclare;\n    switch (item.currency) {\n        case 'usd':\n            priceDeclare = `$ ${item.price}`;\n            break;\n        case 'vnd':\n            priceDeclare = `${item.price} vnđ`;\n            break;\n        default:\n            priceDeclare = `$ ${item.price}`;\n            break;\n    }\n    const redirect = () => {\n        history.push(`/product/${item._id}`);\n    }\n    const addItemToCart = () => {\n        dispatch(addToCart(props.item));\n        setCartOpen(true);\n    } \n    return(\n        <>\n        <Card className={classes.cardItem} >\n            <CardMedia className={classes.cardMedia} image={item.image} title={item.title} \n                onMouseEnter={() => setIsShown(true)}\n                onMouseLeave={() => setIsShown(false)}\n                onClick={redirect}\n            />\n            <CardContent className={classes.cardContent}>\n                <Typography variant='body1' component='p'>{item.title}</Typography>\n            </CardContent>\n            <CardActions className={classes.cardActions}>\n                <IconButton className={classes.iconButton} aria-label=\"Add to favorites\">\n                    <FavoriteBorderOutlinedIcon className={classes.icon}/>\n                </IconButton>\n                <IconButton className={classes.iconButton} aria-label=\"Add to cart\" onClick={addItemToCart}>\n                    <AddShoppingCartIcon className={classes.icon} />\n                </IconButton>\n            </CardActions>\n        </Card>\n        <Hidden mdDown>\n            <Fade in={isShown} timeout={{appear: 100, enter: 300, exit: 100}} unmountOnExit>\n                <Box className={classes.quickView} \n                    onMouseEnter={() => setIsShown(true)}\n                    onMouseLeave={() => setIsShown(false)}\n                    onClick={redirect}\n                >\n                    <Typography variant='body1'>\n                        {priceDeclare}\n                    </Typography>\n                </Box>       \n            </Fade>\n        </Hidden>\n        <Hidden lgUp>\n            <Box className={classes.quickView} \n                onMouseEnter={() => setIsShown(true)}\n                onMouseLeave={() => setIsShown(false)}\n                onClick={redirect}\n            >\n                <Typography variant='body1'>\n                    {priceDeclare}\n                </Typography>\n            </Box>  \n        </Hidden>\n        </>\n    )\n}\n\nCardItem.propTypes = {\n    item: PropTypes.shape({\n        _id: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n        image: PropTypes.string.isRequired,\n        price: PropTypes.number.isRequired,\n    })\n}\n\nconst CoverflowEffect = (props) => {\n    const params = {\n        effect: 'coverflow',\n        centeredSlides: true,\n        slidesPerView: 'auto',\n        // loop: true,\n        coverflowEffect: {\n            rotate: 50,\n            stretch: 0,\n            depth: 100,\n            modifier: 1,\n            slideShadows: true\n        },\n        pagination: {\n            el: '.swiper-pagination'\n        },\n    }\n    const swiperSlide = { height: CARD_ITEM_HEIGHT,  width: CARD_ITEM_WIDTH, }\n    return (\n      <Swiper {...params}>    \n        {\n            props.listItems.map((item, i) => {\n                return (\n                    <div className=\"swiper-slide\" style={swiperSlide} key={i}>\n                        {props.render(item, i)}\n                    </div>)\n                }\n            )\n        }\n      </Swiper>\n    )\n};\n\nCoverflowEffect.propTypes = {\n    listItems: PropTypes.arrayOf(\n        PropTypes.shape({\n            _id: PropTypes.string.isRequired,\n            title: PropTypes.string.isRequired,\n            image: PropTypes.string.isRequired,\n            price: PropTypes.number.isRequired,\n        })\n    )\n}\n\nconst MutipleSlidesPerView = (props) => {\n    const params = {\n        slidesPerView: 1,\n        spaceBetween: 30,\n        freeMode: true,\n        // loop: true,\n        direction: 'horizontal',\n        mousewheel: true,\n        grabCursor: true,\n        pagination: {\n            el: '.swiper-pagination',\n            clickable: true,\n        },\n        navigation: {\n            nextEl: '.swiper-button-next',\n            prevEl: '.swiper-button-prev',\n        },\n        breakpoints: {\n             // when window width is >= 600px\n            600: {\n                slidesPerView: 3,\n            },\n            960: {\n                slidesPerView: 4,\n            },\n            1280: {\n                slidesPerView: 5,\n            },\n            1450: {\n                slidesPerView: 6,\n            }\n        }\n    }\n    const swiperSlide = { height: CARD_ITEM_HEIGHT,  width: CARD_ITEM_WIDTH, }\n    return (\n      <Swiper {...params}>\n        {\n            props.listItems.map((item, i) => {\n                return (\n                    <div className=\"swiper-slide\" style={swiperSlide} key={i}>\n                        {props.render(item, i)}\n                    </div>)\n                }\n            )\n        }\n      </Swiper>\n    )\n};\n\nMutipleSlidesPerView.propTypes = {\n    listItems: PropTypes.arrayOf(\n        PropTypes.shape({\n            _id: PropTypes.string.isRequired,\n            title: PropTypes.string.isRequired,\n            image: PropTypes.string.isRequired,\n            price: PropTypes.number.isRequired,\n        })\n    )\n}\n\nconst Home = () => {\n    const classes = useStyle();\n    const dispatch = useDispatch();\n    const {isDarkMode} = useContext(ThemeContext);\n    const bestsellerProducts = useSelector(state => state.bestsellerProducts);\n    const { bestsellers, loading: bestsellersLoading } = useMemo(() => bestsellerProducts, [bestsellerProducts]);\n    const recommendedProducts = useSelector(state => state.recommendedProducts);\n    const { recommendeds, loading: recommendedsLoading } = useMemo(() => recommendedProducts, [recommendedProducts]);\n    useEffect(() => {\n        dispatch(getBestsellers());\n        dispatch(getRecommendeds());\n    }, []);\n    return(\n        <Container className={classes.container} maxWidth='xl'>\n            <Paper className={classes.cover}>\n                <Box className={classes.coverBox}>\n                    <Hidden xsDown>\n                        <Typography className={classes.coverQuote} variant=\"h3\" component=\"h2\">\n                            A little reading is all the therapy a person needs sometimes.\n                        </Typography>\n                        <br />\n                        <Typography className={classes.coverQuote} variant=\"h5\" component=\"p\">\n                            - anonymous -\n                        </Typography>\n                    </Hidden>\n                    <Hidden smUp>\n                        <Typography className={classes.coverQuote} variant=\"h3\" component=\"h2\">\n                            Reading is dreaming with open eyes.\n                        </Typography>\n                        <br />\n                        <Typography className={classes.coverQuote} variant=\"subtitle1\" component=\"p\">\n                            - Anissa Trisdianty -\n                        </Typography>\n                    </Hidden>\n                </Box>\n            </Paper>\n            {\n                !isDarkMode && <Card className={classes.sectionBack}/>\n            }\n            <Hidden xsDown>\n                <Container className={clsx(classes.section, classes.bestsellers)} maxWidth='xl'>\n                    <Typography className={classes.sectionTitle} variant=\"h3\" component=\"h3\">\n                        <FormattedMessage id='bestsellers' defaultMessage=\"Bestsellers\" />\n                    </Typography>\n                    <hr className={classes.divider}/>\n                    {\n                        bestsellersLoading\n                        ? \n                        <div className={classes.loading}>\n                            <p>Loading...</p>\n                            <img src={spinnerImage} alt=\"Loading...\"/>\n                        </div>\n                        :\n                        <MutipleSlidesPerView \n                            render={(item, i) => <CardItem key={`bestsellers_xs_${i}`} item={item} />}\n                            listItems={bestsellers}\n                        />\n                    }\n                </Container>\n                <Container className={clsx(classes.section, classes.recommendeds)} maxWidth='xl'>\n                    <Typography className={classes.sectionTitle} variant=\"h3\" component=\"h3\">\n                        <FormattedMessage id='recommended_books' defaultMessage=\"Recommended Books\" />\n                    </Typography>\n                    <hr className={classes.divider}/>\n                    {\n                        recommendedsLoading\n                        ?\n                        <div className={classes.loading}>\n                            <p>Loading...</p>\n                            <img src={spinnerImage} alt=\"Loading...\"/>\n                        </div>\n                        :\n                        <MutipleSlidesPerView \n                            render={(item, i) => <CardItem key={`recommendeds_xs_${i}`} item={item} />}\n                            listItems={recommendeds}    \n                        />\n                    }\n                </Container>\n            </Hidden>\n            <Hidden smUp>\n                <Container className={clsx(classes.section, classes.bestsellers)} maxWidth='xl'>\n                    <Typography className={classes.sectionTitle} variant=\"h3\" component=\"h3\">\n                        <FormattedMessage id='bestsellers' defaultMessage=\"Bestsellers\" />\n                    </Typography>\n                    <hr className={classes.divider}/>\n                    {\n                        bestsellersLoading\n                        ?\n                        <div className={classes.loading}>\n                            <p>Loading...</p>\n                            <img src={spinnerImage} alt=\"Loading...\"/>\n                        </div>\n                        :\n                        <CoverflowEffect \n                            render={(item, i) => <CardItem key={`bestsellers_sm_${i}`} item={item} />}\n                            listItems={bestsellers}\n                        />\n                    }\n                </Container>\n                <Container className={clsx(classes.section, classes.recommendeds)} maxWidth='xl'>\n                    <Typography className={classes.sectionTitle} variant=\"h3\" component=\"h3\">\n                        <FormattedMessage id='recommended_books' defaultMessage=\"Recommended Books\" />\n                    </Typography>\n                    <hr className={classes.divider}/>\n                    {\n                        recommendedsLoading\n                        ?\n                        <div className={classes.loading}>\n                            <p>Loading...</p>\n                            <img src={spinnerImage} alt=\"Loading...\"/>\n                        </div>\n                        :\n                        <CoverflowEffect \n                            render={(item, i) => <CardItem key={`recommendeds_sm_${i}`} item={item} />}\n                            listItems={recommendeds}\n                        />\n                    }\n                </Container>\n            </Hidden>\n            <Container className={clsx(classes.section, classes.author)} maxWidth='xl'>\n                <Box className={classes.sectionTitle}>\n                    <Typography variant=\"body1\" component=\"h3\" style={{fontFamily: FONT_F_PLAYFAIR}}>\n                        <FormattedMessage id='this_month' defaultMessage=\"This month's\" />\n                    </Typography>\n                    <Typography variant=\"h3\" component=\"h3\" style={{fontFamily: FONT_F_PLAYFAIR}}>\n                        <FormattedMessage id='favorite_author' defaultMessage=\"Favorite Author\" />\n                    </Typography>\n                </Box>\n                <hr className={classes.divider}/>\n                <Container maxWidth='md'>\n                    <Grid container spacing={3}>\n                        <Grid item xs={12} md={6} style={{textAlign: 'center'}}>\n                            <Avatar className={classes.authorAvatar} alt=\"Author Avatar\" src={authorAvatar} variant=\"rounded\" />\n                            <Typography className={classes.authorName} variant=\"h3\" component=\"h4\">Trần Văn Đức</Typography>\n                        </Grid>\n                        <Grid item xs={12} md={6}>\n                            <Typography className={classes.authorQuote}  variant=\"subtitle1\" component=\"p\">\n                                <i><FormattedMessage id=\"const_auth_quote\" defaultMessage=\"Author Quote\"></FormattedMessage></i>\n                            </Typography>\n                            <Typography className={classes.authorPresent}  variant=\"h5\" component=\"p\">\n                                <FormattedMessage id=\"const_auth_present\" defaultMessage=\"Author Presentation\"></FormattedMessage>\n                            </Typography>\n                        </Grid>\n                    </Grid>  \n                </Container>              \n            </Container>\n        </Container>\n    )\n}\n\nexport default Home;","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/locales/en.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/locales/vi.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/reducers/globalReducer.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/constants/globalConstants.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/reducers/orderReducers.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/reducers/userReducers.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/reducers/productReducers.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/contexts/RedirectOpenContext.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/contexts/ThemeContext.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/contexts/AuthOpenContext.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/contexts/CartOpenContext.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/features/CopyRight.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/features/CartBar.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/features/AuthPopup.js",["233","234","235","236"],"\nimport { forwardRef, useContext, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport useStyles from './AuthPopup.styles';\nimport { Button, Checkbox, CircularProgress, Dialog, FormControlLabel, Grid, Paper, Tab, Tabs, TextField, Typography } from '@material-ui/core';\nimport AuthOpenContext from '../../contexts/AuthOpenContext';\nimport booksIcon from '../../images/homework.png';\nimport { register, clearUserSigninErros, signin } from '../../actions/userActions';\n\nconst PARAM_FIRSTNAME = \"firstName\";\nconst PARAM_LASTNAME = \"lastName\";\nconst PARAM_EMAIL = \"email\";\nconst PARAM_PASSWORD = \"password\";\nconst PARAM_RE_PASSWORD = \"rePassword\";\n\nconst SignIn = forwardRef((props, ref) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const intl = useIntl();\n    const emailAddressTransl = intl.formatMessage({id: 'email_address', defaultMessage: \"Email Address\"});\n    const passwordTransl = intl.formatMessage({id: 'password', defaultMessage: \"Password\"});\n    const [ email, setEmail ] = useState();\n    const [ password, setPassword ] = useState(); \n    const [ emailErr, setEmailErr ] = useState();\n    const [ passwordErr, setPasswordErr ] = useState(); \n    const [error, setError] = useState();\n    const userSignin = useSelector(state => state.userSignin);\n    const { loading, userInfo, errors } = userSignin;\n    useEffect(() => {\n        if(errors?.length > 0) {\n            errors.forEach(err => {\n                switch (err?.param) {\n                    case PARAM_EMAIL:\n                        setEmailErr(intl.formatMessage({id: err.msg, defaultMessage: err.msg}));\n                        break;\n                    case PARAM_PASSWORD:\n                        setPasswordErr(intl.formatMessage({id: err.msg, defaultMessage: err.msg}));\n                        break;\n                    default:\n                        setError(intl.formatMessage({id: err.msg, defaultMessage: err.msg}))\n                        break;\n                }\n            });\n        }\n        return (() => clearErrors());\n    }, [errors]);\n    const clearErrors = () => {\n        dispatch(clearUserSigninErros());\n    }\n    const submitHandler = (e) => {\n        e.preventDefault();\n        dispatch(signin({ email, password }));\n    }\n    useImperativeHandle(ref, () => ({\n        close(){\n            clearErrors()\n        }\n    }));\n    return(\n        <div className={classes.tabContent}>\n            <div className={classes.iconBox}>\n                <img src={booksIcon} alt=\"Books\" className={classes.icon}/>\n            </div>\n            <Typography component=\"h1\" variant=\"h5\" className={classes.welcome}>\n                <FormattedMessage id='welcome' defaultMessage=\"Welcome to Atticus Literature\" />\n            </Typography>\n            {loading && <Typography component=\"p\" variant=\"body1\">Loading...</Typography>}\n            {error && <Typography component=\"p\" variant=\"body1\" color=\"error\">{error}</Typography>}\n            <form className={classes.form} noValidate={false} onSubmit={submitHandler}>\n                <TextField\n                    variant=\"outlined\" margin=\"normal\"\n                    required fullWidth autoFocus\n                    name=\"email\" type=\"email\" autoComplete=\"email\"      \n                    label={emailAddressTransl}             \n                    onChange={(e) => { clearErrors(); setEmail(e.target.value)}}\n                    error={Boolean(emailErr)}\n                    helperText={emailErr}\n                />\n                <TextField\n                    variant=\"outlined\" margin=\"normal\"\n                    required fullWidth\n                    name=\"password\" type=\"password\" autoComplete=\"current-password\"\n                    label={passwordTransl}\n                    onChange={(e) => { clearErrors(); setPassword(e.target.value)}}\n                    error={Boolean(passwordErr)}\n                    helperText={passwordErr}\n                />\n                {/* <FormControlLabel\n                    control={<Checkbox value=\"remember\" color=\"primary\" />}\n                    label=\"Remember me\"\n                /> */}\n                {\n                    loading\n                    ?\n                    <CircularProgress size={30} />\n                    :\n                    <Button\n                        type=\"submit\"\n                        fullWidth variant=\"contained\" color=\"primary\"\n                        className={classes.submit}\n                    >\n                        <FormattedMessage id='sign_in' defaultMessage=\"Sign In\" />\n                    </Button>\n                }\n            </form> \n            <div>Icons made by <a href=\"https://www.freepik.com\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n        </div>\n    )\n})\n\nconst SignUp = forwardRef((props, ref) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const intl = useIntl();\n    const firstnameTransl = intl.formatMessage({id: 'firstname', defaultMessage: \"First Name\"});\n    const lastnameTransl = intl.formatMessage({id: 'lastname', defaultMessage: \"Last Name\"});\n    const emailAddressTransl = intl.formatMessage({id: 'email_address', defaultMessage: \"Email Address\"});\n    const passwordTransl = intl.formatMessage({id: 'password', defaultMessage: \"Password\"});\n    const rePasswordTransl = intl.formatMessage({id: 're_password', defaultMessage: \"Re-Enter Password\"});\n    const receivePromoTransl = intl.formatMessage({id: 'receive_promo', defaultMessage: \"I want to receive inspiration, marketing promotions and updates via email.\"});\n    const [firstName, setFirstName] = useState('');\n    const [lastName, setLastName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [rePassword, setRePassword] = useState();\n    const [firstNameErr, setFirstNameErr] = useState();\n    const [lastNameErr, setLastNameErr] = useState();\n    const [emailErr, setEmailErr] = useState();\n    const [passwordErr, setPasswordErr] = useState();\n    const [rePasswordErr, setRePasswordErr] = useState();\n    const [error, setError] = useState();\n    const userSignin = useSelector(state => state.userSignin);\n    const { loading, errors } = userSignin;\n    useEffect(() => {\n        if(errors?.length > 0) {\n            errors.forEach(err => {\n                switch (err?.param) {\n                    case PARAM_FIRSTNAME:\n                        setFirstNameErr(intl.formatMessage({id: err.msg, defaultMessage: err.msg}));\n                        break;\n                    case PARAM_LASTNAME:\n                        setLastNameErr(intl.formatMessage({id: err.msg, defaultMessage: err.msg}));\n                        break;\n                    case PARAM_EMAIL:\n                        setEmailErr(intl.formatMessage({id: err.msg, defaultMessage: err.msg}));\n                        break;\n                    case PARAM_PASSWORD:\n                        setPasswordErr(intl.formatMessage({id: err.msg, defaultMessage: err.msg}));\n                        break;\n                    case PARAM_RE_PASSWORD:\n                        setRePasswordErr(intl.formatMessage({id: err.msg, defaultMessage: err.msg}));\n                        break;\n                    default:\n                        setError(intl.formatMessage({id: err.msg, defaultMessage: err.msg}))\n                        break;\n                }\n            });\n        }\n        return (() => clearErrors());\n    }, [errors]);\n    const clearErrors = () => {\n        dispatch(clearUserSigninErros());\n    }\n    const submitHandler = (e) => {\n        e.preventDefault();\n        dispatch(register({ firstName, lastName, email, password, rePassword }));\n    }\n    useImperativeHandle(ref, () => ({\n        close(){\n            clearErrors()\n        }\n    }));\n    return(\n        <div className={classes.tabContent}>\n            <div className={classes.iconBox}>\n                <img src={booksIcon} alt=\"Books\" className={classes.icon}/>\n            </div>\n            <Typography component=\"h1\" variant=\"h5\" className={classes.welcome}>\n                <FormattedMessage id='welcome' defaultMessage=\"Welcome to Atticus Literature\" />\n            </Typography>\n            {loading && <Typography component=\"p\" variant=\"body1\">Loading...</Typography>}\n            {error && <Typography component=\"p\" variant=\"body1\" color=\"error\">{error}</Typography>}\n            <form className={classes.form} noValidate={false} onSubmit={submitHandler}>\n                <Grid container spacing={2}>\n                    <Grid item xs={12} sm={6}>\n                        <TextField                          \n                            variant=\"outlined\" required fullWidth autoFocus\n                            name=\"firstName\" autoComplete=\"fname\"\n                            label={firstnameTransl}                       \n                            onChange={(e) => { clearErrors(); setFirstName(e.target.value)}}\n                            inputProps={{\n                                maxLength: 15,\n                            }}\n                            error={Boolean(firstNameErr)}\n                            helperText={firstNameErr}\n                        />\n                    </Grid>\n                    <Grid item xs={12} sm={6}>\n                        <TextField\n                            variant=\"outlined\" required fullWidth\n                            name=\"lastName\" autoComplete=\"lname\"\n                            label={lastnameTransl}\n                            onChange={(e) => { clearErrors(); setLastName(e.target.value)}}\n                            inputProps={{\n                                maxLength: 15,\n                            }}\n                            error={Boolean(lastNameErr)}\n                            helperText={lastNameErr}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\" required fullWidth\n                            name=\"email\" autoComplete=\"email\"\n                            label={emailAddressTransl}\n                            type=\"email\"  \n                            onChange={(e) => { clearErrors(); setEmail(e.target.value)}}\n                            error={Boolean(emailErr)}\n                            helperText={emailErr}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\" required fullWidth\n                            name=\"password\" autoComplete=\"current-password\"\n                            label={passwordTransl}\n                            type=\"password\"\n                            onChange={(e) => { clearErrors(); setPassword(e.target.value)}}\n                            error={Boolean(passwordErr)}\n                            helperText={passwordErr}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <TextField\n                            variant=\"outlined\" required fullWidth\n                            name=\"rePassword\" autoComplete=\"re-password\"\n                            label={rePasswordTransl}\n                            type=\"password\"\n                            onChange={(e) => { clearErrors(); setRePassword(e.target.value)}}\n                            error={Boolean(rePasswordErr)}\n                            helperText={rePasswordErr}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FormControlLabel\n                            control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" />}\n                            label={receivePromoTransl}\n                        />\n                    </Grid>\n                </Grid>\n                {\n                    loading\n                    ?\n                    <CircularProgress size={30} />\n                    :\n                    <Button\n                        type=\"submit\"\n                        fullWidth variant=\"contained\" color=\"primary\"\n                        className={classes.submit}\n                    >\n                        <FormattedMessage id='sign_up' defaultMessage=\"Sign Up\" />\n                    </Button>\n                }\n            </form> \n            <div>Icons made by <a href=\"https://www.freepik.com\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n        </div>\n    )\n})\n\nconst AuthPopup = () => {\n    const intl = useIntl();\n    const signInTransl = intl.formatMessage({id: 'sign_in', defaultMessage: \"Sign In\"});\n    const signUpTransl = intl.formatMessage({id: 'sign_up', defaultMessage: \"Sign Up\"});\n    const { isAuthOpen, setAuthOpen } = useContext(AuthOpenContext);\n    const { userInfo } = useSelector(state => state.userSignin);\n    const signInRef = useRef();\n    const signUpRef = useRef();\n    const [ tab, setTab ] = useState(0);\n\n    const handleClose = () => {\n        signInRef.current?.close();\n        signUpRef.current?.close();\n        setTab(0);\n        setAuthOpen(false);\n    }\n    const handleSwitchTab = (event, newValue) => {\n        setTab(newValue);\n    }\n    useEffect(() => {\n        if(userInfo) handleClose();\n    }, [userInfo])\n    return(\n        <Dialog open={isAuthOpen} onClose={handleClose} >\n            <Paper square>\n                <Tabs\n                    indicatorColor=\"primary\" textColor=\"primary\" \n                    centered variant=\"fullWidth\"\n                    value={tab} onChange={handleSwitchTab}\n                    aria-label=\"sign in - sign up\"\n                >\n                    <Tab label={signInTransl} />\n                    <Tab label={signUpTransl} />\n                </Tabs>\n                {\n                    tab === 0\n                    ?\n                    <SignIn ref={signInRef} />\n                    :\n                    <SignUp ref={signUpRef} />\n                }\n            </Paper>\n        </Dialog>\n    )\n}\n\nexport default AuthPopup;","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/features/RedirectBar.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/Bookstore/index.js",["237"],"import { useContext, useEffect, useMemo, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormattedMessage } from 'react-intl';\nimport { Box, Card, CardActions, CardContent, CardMedia, Container, Fade, IconButton, Typography } from '@material-ui/core';\nimport useStyle from './styles';\nimport boxEmptyImage from '../../../images/box_empty.png';\nimport CartOpenContext from '../../../contexts/CartOpenContext';\nimport Pagination from '@material-ui/lab/Pagination';\nimport FavoriteBorderOutlinedIcon from '@material-ui/icons/FavoriteBorderOutlined';\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\n\nimport Catalogue from './Catalogue';\nimport { addToCart, getStore } from '../../../actions/productActions';\n\nconst CardItem = (props) => {\n    const classes = useStyle();\n    const history = useHistory();\n    const [isShown, setIsShown] = useState(false);\n    const { setCartOpen } = useContext(CartOpenContext);\n    const dispatch = useDispatch();\n    const item = props.item;\n    let priceDeclare;\n    switch (item.currency) {\n        case 'usd':\n            priceDeclare = `$ ${item.price}`;\n            break;\n        case 'vnd':\n            priceDeclare = `${item.price} vnđ`;\n            break;\n        default:\n            priceDeclare = `$ ${item.price}`;\n            break;\n    }\n    const redirect = () => {\n        history.push(`/product/${item._id}`)\n    }\n    const addItemToCart = () => {\n        dispatch(addToCart(item));\n        setCartOpen(true);\n    } \n    return(\n        <>\n        <Card className={classes.cardItem} >\n            <CardMedia className={classes.cardMedia} image={item.image} title={item.title} \n                onMouseEnter={() => setIsShown(true)}\n                onMouseLeave={() => setIsShown(false)}\n                onClick={redirect}\n            />\n            <CardContent className={classes.cardContent}>\n                <Typography variant='body1' component='p'>{item.title}</Typography>\n            </CardContent>\n            <CardActions className={classes.cardActions}>\n                <IconButton className={classes.iconButton} aria-label=\"Add to favorites\">\n                    <FavoriteBorderOutlinedIcon className={classes.icon}/>\n                </IconButton>\n                <IconButton className={classes.iconButton} aria-label=\"Add to cart\" onClick={addItemToCart}>\n                    <AddShoppingCartIcon className={classes.icon} />\n                </IconButton>\n            </CardActions>\n        </Card>\n        <Fade in={isShown} timeout={{appear: 100, enter: 300, exit: 100}} unmountOnExit>\n            <Box className={classes.quickView} \n                onMouseEnter={() => setIsShown(true)}\n                onMouseLeave={() => setIsShown(false)}\n                onClick={redirect}\n            >\n                <Typography variant='body1'>\n                    {priceDeclare}\n                </Typography>\n            </Box>       \n        </Fade>\n        </>\n    )\n}\n\nCardItem.propTypes = {\n    item: PropTypes.shape({\n        _id: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n        image: PropTypes.string.isRequired,\n        price: PropTypes.number.isRequired,\n    })\n}\n\nconst Bookstore = () => {\n    const PRODUCTS_PER_PAGE = 15;\n    let searchArray = [];\n    let searchObj = {};\n    const classes = useStyle();\n    const { search } = useLocation();\n    const dispatch = useDispatch();\n    const catalogueComponent = useMemo(() => <Catalogue />, []);\n    const language = useSelector(state => state.language);\n    const { products } = useSelector(state => state.store);\n    let countPages = Math.ceil(products.length/PRODUCTS_PER_PAGE) > 0 ? Math.ceil(products.length/PRODUCTS_PER_PAGE) : 1;\n    const [currentPage, setCurrentPage] = useState(1);\n    const [currentProducts, setCurrentProducts] = useState(products.slice(0, PRODUCTS_PER_PAGE));\n    const handlePageChange = (event, value) => {\n        setCurrentPage(value);\n        setCurrentProducts(products.slice((value-1)*PRODUCTS_PER_PAGE, value*PRODUCTS_PER_PAGE));\n    }\n    useEffect(() => {\n        searchArray = search.slice(1).split('&');\n        searchArray.forEach(equation => {\n            const key = equation.split('=')[0];\n            const value = equation.split('=')[1];\n            searchObj[key] = value;\n        })\n        dispatch(getStore(searchObj));\n    }, [search]);\n    useEffect(() => {\n        setCurrentProducts(products.slice(0, PRODUCTS_PER_PAGE));\n    }, [products])\n    return (\n        <div className={classes.root}>\n            <Container className={classes.container} maxWidth='xl'>\n                <div className={classes.title}>\n                {\n                    language === 'vi'\n                    ?\n                    <>\n                    <Typography variant='h3' component='h1'>Hiệu sách</Typography>\n                    <Typography variant='h5' component='h1'>của Atticus</Typography>\n                    </>\n                    :\n                    <>\n                    <Typography variant='h5' component='h1'>Atticus's</Typography>\n                    <Typography variant='h3' component='h1'>Bookstore</Typography>\n                    </>\n                }\n                </div>\n                <div className={classes.content}>\n                    <div className={classes.catalogue}>\n                        {catalogueComponent}\n                    </div>\n                    <div className={classes.products}>\n                       {\n                           products.length > 0\n                           ?\n                           <>\n                           <div className={classes.table}>\n                                {\n                                    currentProducts.map((item, i) => (\n                                        <div key={i} className={classes.item}>\n                                            <CardItem item={item}/>\n                                        </div>\n                                    ))\n                                }\n                            </div>\n                            <div className={classes.pagination}>\n                                <Pagination count={countPages} page={currentPage} onChange={handlePageChange} />\n                            </div>\n                            </>\n                            :\n                            <div className={classes.emptySection}>\n                                <div className={classes.emptyImage}>\n                                    <img src={boxEmptyImage} alt=\"Box empty\" />\n                                </div>\n                                <div>\n                                <Typography>\n                                    <FormattedMessage id='no_result' defaultMessage='Currently no result' />\n                                </Typography>\n                                </div>\n                            </div>\n                       }\n                    </div>\n                </div>\n            </Container>\n        </div>\n    )\n}\n\nexport default Bookstore;","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/Product/index.js",["238"],"import React, { useContext, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { FormattedMessage } from 'react-intl';\nimport { Button, Container, Typography, TextField, IconButton, Collapse, Box } from '@material-ui/core';\nimport useStyle from './styles';\nimport FavoriteBorderOutlinedIcon from '@material-ui/icons/FavoriteBorderOutlined';\nimport MinusIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport Rating from '@material-ui/lab/Rating';\n\nimport CartOpenContext from '../../../contexts/CartOpenContext';\nimport { addMultipleToCart, getItemDetail } from '../../../actions/productActions';\n\nconst MINUS_INTRO_ICON = 'MINUS_INTRO_ICON';\nconst MINUS_SHIPPING_ICON = 'MINUS_SHIPPING_ICON';\nconst MINUS_POLICY_ICON = 'MINUS_POLICY_ICON';\nconst ADD_INTRO_ICON = 'ADD_INTRO_ICON';\nconst ADD_SHIPPING_ICON = 'ADD_SHIPPING_ICON';\nconst ADD_POLICY_ICON = 'ADD_POLICY_ICON';\n\nconst Product = () => {\n    const classes = useStyle();\n    const dispatch = useDispatch();\n    const { id: productId } = useParams();\n    const [quantity, setQuantity] = useState(1);\n    const [expandedIntro, setExpandedIntro] = useState(true);\n    const [expandedShipping, setExpandedShipping] = useState(false);\n    const [expandedPolicy, setExpandedPolicy] = useState(false);\n    const { setCartOpen } = useContext(CartOpenContext);\n    const viewingProduct = useSelector(state => state.viewingProduct);\n    const { product, error } = viewingProduct;\n    let priceDeclare;\n    if(product) {\n        switch (product.currency) {\n            case 'usd':\n                priceDeclare = `$ ${product.price}`;\n                break;\n            case 'vnd':\n                priceDeclare = `${product.price} vnđ`;\n                break;\n            default:\n                priceDeclare = `$ ${product.price}`;\n                break;\n        }\n    }\n    const addQuantity = (e) => {\n        const newQuantity = e.target.value;\n        if(!newQuantity) {\n            return\n        } else if(newQuantity < 1) {\n            setQuantity(1);\n            e.target.value = 1;\n        } else setQuantity(newQuantity);\n    }\n    useEffect(() => {\n        dispatch(getItemDetail(productId));\n    }, [productId])\n    const handleExpand = (target) => {\n        switch (target) {\n            case ADD_INTRO_ICON:\n                setExpandedIntro(true);\n                setExpandedShipping(false);\n                setExpandedPolicy(false);\n                break;\n            case ADD_SHIPPING_ICON:\n                setExpandedIntro(false);\n                setExpandedShipping(true);\n                setExpandedPolicy(false);\n                break;\n            case ADD_POLICY_ICON:\n                setExpandedIntro(false);\n                setExpandedShipping(false);\n                setExpandedPolicy(true);\n                break;\n            case MINUS_INTRO_ICON:\n                setExpandedIntro(false);\n                break;\n            case MINUS_SHIPPING_ICON:\n                setExpandedShipping(false);\n                break;\n            case MINUS_POLICY_ICON:\n                setExpandedPolicy(false);\n                break;\n            default:\n                break;\n        }     \n    };\n    const handleAddCart = () => {\n        const addingProduct = {...product, quantity};\n        dispatch(addMultipleToCart(addingProduct));\n        setCartOpen(true);\n    }\n    return(\n        <div className={classes.root}>\n            {\n                product\n                ?\n                <Container className={classes.container} maxWidth='md'>\n                    <div className={classes.gridImage}>\n                        <img src={product.image} alt={product.title} className={classes.productImage}/>\n                        <IconButton className={classes.favoriteButton} aria-label=\"Add to favorites\">\n                            <FavoriteBorderOutlinedIcon className={classes.icon}/>\n                        </IconButton>\n                    </div>\n                    <div className={classes.mainInfo}>\n                        <div className={classes.mainInfoTitle}>\n                            <Typography variant='h5' component='h1'>\n                                {product.title}\n                            </Typography>\n                            <Typography variant='h6' component='p'>\n                                <FormattedMessage id='author_by' defaultMessage='by' />{' '}\n                                {product.authorIds.reduce((string, author, index) => {\n                                    if(index === product.authorIds.length -1 ) return string += author.name;\n                                    else return string += `${author.name}, `;                                                  \n                                }, '')}\n                            </Typography>\n                        </div>\n                        <div className={classes.mainInfoActions}>\n                            <div className={classes.infoPrice}>\n                                <Typography variant='h5' component='p'>\n                                    {priceDeclare}\n                                </Typography>\n                            </div>\n                            <div className={classes.infoQuantity}>\n                                <Typography variant='body1' component='p'>\n                                    <FormattedMessage id='quantity' defaultMessage='Quantity' /> :\n                                </Typography> \n                                <TextField id='product-quantity' className={classes.infoTextfield} \n                                    type='number' variant='outlined' size='small'\n                                    defaultValue={quantity}\n                                    onChange={(e) => addQuantity(e)} />\n                            </div>\n                            <div className={classes.infoAdd}>\n                                <Button className={classes.infoAddButton} onClick={handleAddCart}>\n                                    <FormattedMessage id='add_to_cart' defaultMessage='Add to Cart' />\n                                </Button>\n                            </div>\n                        </div>\n                        <div className={classes.mainInfoCollapses}>\n                            <div className={classes.collapseSection}>\n                                <div className={classes.collapseTitle}>\n                                    <Typography variant='h6' component='h3'>\n                                        <FormattedMessage id='intro' defaultMessage='Introduction' />\n                                    </Typography>\n                                    {\n                                        expandedIntro\n                                        ?\n                                        <IconButton id={MINUS_INTRO_ICON} onClick={e => handleExpand(MINUS_INTRO_ICON)} >\n                                            <MinusIcon fontSize='small' className={classes.collapseIcon}/>\n                                        </IconButton>\n                                        :\n                                        <IconButton id={ADD_INTRO_ICON} onClick={e => handleExpand(ADD_INTRO_ICON)} >\n                                            <AddIcon fontSize='small' className={classes.collapseIcon}/>\n                                        </IconButton>\n                                    }\n                                </div>\n                                <Collapse in={expandedIntro}>\n                                    <Typography variant='body1' component='p'>\n                                        {product.description}\n                                    </Typography>\n                                </Collapse>\n                            </div>\n                            <div className={classes.collapseSection}>\n                                <div className={classes.collapseTitle}>\n                                    <Typography variant='h6' component='h3'>\n                                        <FormattedMessage id='shipping' defaultMessage='Shipping Info' />\n                                    </Typography>\n                                    {\n                                        expandedShipping\n                                        ?\n                                        <IconButton id={MINUS_SHIPPING_ICON} onClick={e => handleExpand(MINUS_SHIPPING_ICON)}>\n                                            <MinusIcon fontSize='small' className={classes.collapseIcon}/>\n                                        </IconButton>\n                                        :\n                                        <IconButton id={ADD_SHIPPING_ICON} onClick={e => handleExpand(ADD_SHIPPING_ICON)}>\n                                            <AddIcon fontSize='small' className={classes.collapseIcon}/>\n                                        </IconButton>\n                                    }\n                                </div>\n                                <Collapse in={expandedShipping}>\n                                    <Typography variant='body1' component='p'>\n                                        <FormattedMessage id='shipping_policy' \n                                            defaultMessage={`Free delivery within Hanoi & Ho Chi Minh City in maximum 2 hours.\n                                            Delivery within a maximum of 1 week across the territory of Vietnam.`} />\n                                    </Typography>\n                                </Collapse>\n                            </div>\n                            <div className={classes.collapseSection}>\n                                <div className={classes.collapseTitle}>\n                                    <Typography variant='h6' component='h3'>\n                                        <FormattedMessage id='policy' defaultMessage='Return & Refund Policy' />\n                                    </Typography>\n                                    {\n                                        expandedPolicy\n                                        ?\n                                        <IconButton id={MINUS_POLICY_ICON} onClick={e => handleExpand(MINUS_POLICY_ICON)}>\n                                            <MinusIcon fontSize='small' className={classes.collapseIcon}/>\n                                        </IconButton>\n                                        :\n                                        <IconButton id={ADD_POLICY_ICON} onClick={e => handleExpand(ADD_POLICY_ICON)}>\n                                            <AddIcon fontSize='small' className={classes.collapseIcon}/>\n                                        </IconButton>\n                                    }\n                                </div>\n                                <Collapse in={expandedPolicy}>\n                                    <Typography variant='body1' component='p'>\n                                        <FormattedMessage id='return_policy' \n                                            defaultMessage={`If you are not satisfied with a product you ordered from our store or if it is defective or damaged, you can return it to us within 3 days of the delivery date, and we will refund you or will replace the entire item.`} />\n                                    </Typography>\n                            </Collapse>\n                            </div>\n                        </div>\n                    </div>\n                    <div className={classes.additionalInfo}>\n                        <Box className={classes.ratingBox} component=\"fieldset\" mb={3} borderColor=\"transparent\">\n                            <Rating name=\"disabled\" value={product.rating} disabled />\n                            {\n                                product.rating\n                                ?\n                                <Typography variant='body1' component='p' style={{paddingLeft: '8px'}}>\n                                    {`${product.rating} `}\n                                    <FormattedMessage id='stars' defaultMessage='stars' />\n                                </Typography>\n                                :\n                                <></>\n                            }\n                           \n                            <Typography variant='body1' component='p' style={{paddingLeft: '8px'}}>\n                                {`(${product.reviewsCount ? 0 : product.reviewsCount} `}\n                                <FormattedMessage id='reviews' defaultMessage='reviews' />\n                                {')'}\n                            </Typography>\n                        </Box>\n                    </div>\n                </Container>\n                :\n                (\n                    error\n                    ?\n                    <div className={classes.imageSection}>\n                        <div className={classes.errorImage}/>\n                        <a className={classes.attribute} href=\"http://www.freepik.com\" target='_blank' rel=\"noreferrer\">\n                            Image designed by pch.vector / Freepik\n                        </a>\n                    </div>\n                    :\n                    <div className={classes.imageSection}>\n                        <div className={classes.loadingImage}/>\n                        <a className={classes.attribute} href=\"http://www.freepik.com\" target='_blank' rel=\"noreferrer\">\n                            Image designed by vectorjuice / Freepik\n                        </a>\n                    </div>\n                )\n            }\n        </div>\n    )\n}\n\nexport default Product;","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/OrderProcess/index.js",["239","240","241","242","243","244"],"\nimport { useContext, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { useIntl } from 'react-intl';\nimport clsx from 'clsx';\nimport useStyles from './styles';\nimport { CircularProgress, Container, Slide, Step, StepLabel, Stepper, Typography } from '@material-ui/core';\nimport CartOpenContext from '../../../contexts/CartOpenContext';\nimport { Elements as StripeElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { getPublishKey } from '../../../utils/stripeAPI';\nimport FormShipping from './FormShipping';\nimport FormPayment from './FormPayment';\nimport FormComplete from './FormComplete';\n\nconst OrderProcess = () => {\n    const classes = useStyles();\n    const history = useHistory();\n    const intl = useIntl();\n    const shippingInfoTransl = intl.formatMessage({id: 'shipping_info', defaultMessage: \"Shipping information\"});\n    const paymentTransl = intl.formatMessage({id: 'payment', defaultMessage: \"Payment\"});\n    function getSteps() {\n        return [shippingInfoTransl, paymentTransl];\n    }\n    const { country, state, city, loading: shippingFeeLoading, info: shippingFeeInfo } = useSelector(state => state.shippingAddress);\n    const { isCartOpen, setCartOpen } = useContext(CartOpenContext);\n    const [activeStep, setActiveStep] = useState(0);\n    const [stripePromise, setStripePromise] = useState(null)\n    const steps = getSteps();\n\n    const handleNext = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\n    };\n    const handleBack = () => {\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\n    };\n    const handleReset = () => {\n        setActiveStep(0);\n    };\n    \n    useEffect(() => {\n        if (shippingFeeLoading || !city?.name || !state?.name || !country?.name ) history.replace(\"/checkout/\");\n    }, [city, state, country, shippingFeeLoading]);\n    useEffect(() => {\n        setCartOpen(false); // Always close cart bar in this screen\n    }, [isCartOpen]);\n    useEffect(() => {\n        (async() => {\n            const { publishKey } = await getPublishKey();\n            const stripe = loadStripe(publishKey);\n            setStripePromise(stripe);\n        })();\n    }, []);\n    return (\n        <div>\n        {\n            stripePromise\n            ?\n            <StripeElements stripe={stripePromise}>\n                <div className={classes.root}>\n                    <Container className={classes.container} maxWidth='md'>\n                        {\n                            activeStep !== 2\n                            &&\n                            <Stepper className={classes.gridStepper} activeStep={activeStep} alternativeLabel>\n                                {steps.map((label) => (\n                                    <Step key={label}>\n                                        <StepLabel>{label}</StepLabel>\n                                    </Step>\n                                ))}\n                            </Stepper>\n                        }\n                        <Slide in={activeStep === 0} direction=\"right\" mountOnEnter unmountOnExit>\n                            <div>\n                                <FormShipping handleNext={handleNext} activeStep={activeStep} />\n                            </div>\n                        </Slide>\n                        <Slide in={activeStep === 1} direction=\"right\" mountOnEnter unmountOnExit >\n                            <div>\n                                <FormPayment handleBack={handleBack} handleNext={handleNext} activeStep={activeStep} />\n                            </div>\n                        </Slide>\n                        <Slide in={activeStep === 2} direction=\"right\" mountOnEnter unmountOnExit >\n                            <div className={classes.orderCompleted}>\n                                <FormComplete />\n                            </div>\n                        </Slide>   \n                    </Container>\n                </div>       \n            </StripeElements>\n            :\n            <CircularProgress size={40} classes={{ colorPrimary: classes.circularProgress }} />\n        }\n        </div>\n    )\n}\n\nexport default OrderProcess;","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/UnderConstruction/index.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/Checkout/index.js",["245","246","247","248","249"],"\nimport {  useContext, useEffect, useState } from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormattedMessage, injectIntl, useIntl } from 'react-intl';\nimport cscAPI from 'country-state-city'\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport useStyles from './styles';\nimport { Button, Card, Collapse, Container, Divider, Hidden, IconButton, Paper, Snackbar, TextField, Typography } from '@material-ui/core';\nimport CartOpenContext from '../../../contexts/CartOpenContext';\nimport RemoveIcon from '@material-ui/icons/HighlightOff';\nimport MinusIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport TagIcon from '@material-ui/icons/LocalOfferOutlined';\nimport DescriptionOutlinedIcon from '@material-ui/icons/DescriptionOutlined';\nimport { Alert as MuiAlert, Autocomplete } from '@material-ui/lab';\n\nimport { updateLocalCart, removeFromLocalCart } from '../../../actions/productActions';\nimport { changeShippingFee, getShippingFee, saveShippingAddress } from '../../../actions/orderActions';\nimport { retailPriceCalc, wholeSaleCalc, subtotalCalc, shippingFeeCalc, totalSumCalc, totalSumNumber } from '../../../utils/priceCalculator';\n\nconst Alert = (props) => {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nconst CardItem = ({item}) => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const retailPrice = retailPriceCalc(item);\n    const wholeSale = wholeSaleCalc(item);\n    const minusQuantity = () => {\n        if(item.quantity === 1) return;\n        else {\n            const product = {...item, quantity: item.quantity-1};\n            dispatch(updateLocalCart(product));\n        }\n    }\n    const addQuantity = () => {\n        const product = {...item, quantity: item.quantity+1};\n        dispatch(updateLocalCart(product));\n    }\n    const removeItem = () => {\n        dispatch(removeFromLocalCart(item._id));\n    }\n    return (\n        <Card className={classes.cartItem}>\n            <div className={classes.cartItemMedia} \n                style={{backgroundImage: `url(${item.image}`}}\n                onClick={e => history.push(`/product/${item._id}`)}\n            />\n            <div className={classes.cardItemContent}>\n                <div className={classes.cartItemInfo}>\n                    <div className={classes.cartItemTitle}>\n                        <Typography variant='body1' component='p'>\n                            {item.title}\n                        </Typography>\n                    </div>\n                    <div className={classes.cartItemAuthor}>\n                        <Typography variant='body2' component='p'>\n                            <FormattedMessage id='author_by' defaultMessage='by' />{' '}\n                            {item.authorIds.reduce((string, author, index) => {\n                                if(index === item.authorIds.length -1 ) return string += author.name;\n                                else return string += `${author.name}, `;                                                  \n                            }, '')}\n                        </Typography>\n                    </div>\n                    <Typography variant='body2' component='p'>{retailPrice}</Typography>\n                </div>\n                <div className={classes.cartItemQuantity}>\n                    <IconButton onClick={minusQuantity} className={clsx(classes.actionIcon, item.quantity === 1 && classes.disable)} >\n                        <MinusIcon fontSize='small' />\n                    </IconButton>\n                    <Typography variant='body1' component='p'>{item.quantity}</Typography>\n                    <IconButton onClick={addQuantity} className={classes.actionIcon} >\n                        <AddIcon fontSize='small' />\n                    </IconButton>\n                </div>\n            </div>\n            <div className={classes.cartItemWholesale}>\n                <div className={classes.saleNumber}>\n                    <Typography variant='h6' component='p'>{wholeSale}</Typography>                 \n                </div>\n                <div className={classes.saleCancel}>                 \n                    <IconButton onClick={removeItem} className={clsx(classes.actionIcon, classes.removeIcon)}>\n                        <RemoveIcon fontSize='small' />\n                    </IconButton>\n                </div>\n            </div>\n        </Card>\n    )\n}\n\nCardItem.propTypes = {\n    item: PropTypes.shape({\n        _id: PropTypes.string.isRequired,\n        title: PropTypes.string.isRequired,\n        image: PropTypes.string.isRequired,\n        authorIds: PropTypes.arrayOf(PropTypes.shape({\n            name: PropTypes.string.isRequired,\n        })),\n        price: PropTypes.number.isRequired,\n        quantity: PropTypes.number.isRequired,\n    })\n}\n\nconst PromoCode = ({ intl }) => {\n    const classes = useStyles();\n    const placeholder = intl.formatMessage({ id: 'enter_promo', defaultMessage: 'Enter a promo code' });\n    const [code, setCode] = useState('');\n    const [promoError, setPromoError] = useState(false);\n    const closeAlert = (event, reason) => {\n        if (reason === 'clickaway') {\n          return;\n        }  \n        setPromoError(false);\n    };\n    const changeCode = (e) => {\n        setCode(e.target.value);\n    }\n    const keyDown = (e) => {\n        if(e.key === \"Enter\") submitCode();\n    }\n    const submitCode = () => {\n        setCode('');\n        setPromoError(true);\n    }     \n    return(\n        <>\n        <TextField\n            inputRef={input => input && input.focus()}\n            InputProps={{\n                className: classes.themeTextColor\n            }}\n            placeholder={`${placeholder}...`}\n            variant='outlined' size='small'\n            value={code}\n            onChange={e => changeCode(e)}\n            onKeyDown={e => keyDown(e)}\n        />\n        <Button \n            className={clsx(classes.themeTextColor, classes.themeNavbarBackground)} \n            variant='outlined' style={{height: '40px'}}\n            onClick={submitCode}\n        >\n            <FormattedMessage id='apply' defaultMessage='Apply' />\n        </Button>\n        <Snackbar open={promoError} autoHideDuration={6000} onClose={closeAlert}>\n            <Alert onClose={closeAlert} severity=\"info\">\n                <FormattedMessage id='invalid_promo' defaultMessage='Invalid promo code' />\n            </Alert>\n        </Snackbar>\n        </>\n    )\n}\n\nconst AddNote = ({intl}) => {\n    const classes = useStyles();\n    const placeholder = intl.formatMessage({ id: 'note_description', defaultMessage: 'Instructions? Special requests? Add them here.' });\n    const [note, setNote] = useState(\"\");\n    return(\n        <TextField\n            InputProps={{\n                className: classes.themeTextColor\n            }}\n            inputRef={input => input && input.focus()}\n            placeholder={placeholder}\n            variant='outlined' fullWidth\n            multiline rows={4} value={note}\n            onChange={e => {\n                setNote(e.target.value)\n            }}\n        />\n    )\n}\n\nconst Checkout = () => {\n    const classes = useStyles();\n    const intl = useIntl();\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const { isCartOpen, setCartOpen } = useContext(CartOpenContext);\n    const { cartList } = useSelector(state => state.cart);\n    const subtotalDeclare = subtotalCalc(cartList);\n    const { country, state, city, loading: shippingFeeLoading, info: shippingFeeInfo } = useSelector(state => state.shippingAddress);\n    const [ totalSum, setTotalSum ] = useState();\n    const [ openPromo, setOpenPromo ] = useState(false);\n    const [ openNote, setOpenNote ] = useState(false);\n    const PromoCodeComponent = injectIntl(({intl}) => \n        <PromoCode intl={intl} />\n    );\n    const AddNoteComponent = injectIntl(({intl}) => \n        <AddNote intl={intl} />\n    );\n    const countries = cscAPI.getAllCountries();\n    const [ states, setStates ] = useState([]);\n    const [ cities, setCities ] = useState([]);\n    const [ selectedCountry, setSelectedCountry ] = useState(country || {});\n    const [ selectedState, setSelectedState ] = useState(state || {});\n    const [ selectedCity, setSelectedCity ] = useState(city || {});\n    const [ inputCountry, setInputCountry ] = useState(\"\");\n    const [ inputState, setInputState ] = useState(\"\");\n    const [ inputCity, setInputCity ] = useState(\"\");\n    const selectCountryTransl = intl.formatMessage({id: 'select_country', defaultMessage: \"Select Country\"});\n    const selectStateTranls = intl.formatMessage({id: 'select_state', defaultMessage: \"Select State\"});\n    const selectCityTranls = intl.formatMessage({id: 'select_city', defaultMessage: \"Select City\"});\n    const handleCountry = (event, newValue) => {\n        setSelectedCountry(newValue);\n        console.log(newValue);\n        if (!newValue || newValue !== selectedCountry) {\n            setSelectedState({}); setInputState(\"\");\n            setSelectedCity({}); setInputCity(\"\");\n        }\n    };\n    const handleState = (event, newValue) => {\n        setSelectedState(newValue);\n        console.log(newValue);\n        if (!newValue || newValue !== selectedState) {\n            setSelectedCity({}); setInputCity(\"\");\n        }\n    };\n    const handleCity = (event, newValue) => {\n        setSelectedCity(newValue);\n        console.log(newValue);\n    };\n    useEffect(() => {\n        if (selectedCountry?.name?.length > 0) {\n            const stateList = cscAPI.getStatesOfCountry(selectedCountry.isoCode);\n            setStates(stateList);\n            if(stateList.length === 0) {\n                dispatch(getShippingFee({\n                    countryId: selectedCountry.isoCode,\n                }))\n            }\n        }\n    }, [selectedCountry]);\n    useEffect(() => {\n        if (selectedCountry?.name?.length > 0 && selectedState?.name?.length > 0) {\n            const cityList = cscAPI.getCitiesOfState(selectedCountry.isoCode, selectedState.isoCode);\n            setCities(cityList);\n            if(cityList.length === 0) {\n                dispatch(getShippingFee({\n                    countryId: selectedCountry.isoCode,\n                    stateId: selectedState.isoCode,\n                }))\n            }\n        }\n    }, [selectedState]);\n    useEffect(() => {\n        if (!selectedCity || !selectedCity.name) {\n            dispatch(changeShippingFee());\n        } else {\n            dispatch(getShippingFee({\n                countryId: selectedCountry.isoCode,\n                stateId: selectedState.isoCode,\n                cityId: selectedCity.isoCode,\n            }))\n        }\n    }, [selectedCity]);\n    useEffect(() => {\n        if(cartList.length > 0 && !shippingFeeLoading && !isNaN(shippingFeeInfo?.fee)) {\n            setTotalSum(totalSumNumber({\n                items: cartList,\n                shippingFeeInfo,\n            }))\n        } else setTotalSum();\n    }, [cartList, shippingFeeInfo]);\n\n    useEffect(() => {\n        setCartOpen(false); // Always close cart bar in this screen\n    }, [isCartOpen]);\n    const handleOpenPromo = () => {\n        setOpenPromo(!openPromo);\n    }\n    const handleOpenNote = () => {\n        setOpenNote(!openNote);\n    }\n    const handleCheckout = () => {\n        dispatch(saveShippingAddress({\n            country: selectedCountry,\n            state: selectedState,\n            city: selectedCity,\n        }));\n        history.push(\"/order_process/\");\n    }\n    return (\n        <div className={classes.root}>\n            <Container className={classes.container} maxWidth='md'>\n                <div className={classes.gridList}>\n                    <div className={classes.title}>\n                        <Typography variant='h5' component='h2'>\n                            <FormattedMessage id='my_cart' defaultMessage=\"My Cart\" />\n                        </Typography>\n                    </div>\n                    <div className={classes.itemList}>\n                        {\n                            cartList?.length > 0\n                            ?\n                            cartList.map((item, index) => (\n                                <CardItem key={index} item={item} />\n                            ))\n                            :\n                            <>\n                            <Typography variant='body1' component='h2'>\n                                <FormattedMessage id='cart_empty' defaultMessage=\"Your cart is empty\" />{'. '}\n                                <Link to=\"/bookstore/\">\n                                    <FormattedMessage id='continue_shopping' defaultMessage=\"Continue shopping\" />\n                                </Link>\n                                {'.'}\n                            </Typography>\n                            </>\n                        }\n                    </div>\n                    <div className={classes.additional}>\n                        <div className={classes.additionalTitle}>\n                            <Button \n                                className={classes.themeTextColor} \n                                onClick={handleOpenPromo}\n                            >\n                                <TagIcon fontSize='small' style={{marginRight: \"8px\"}} />\n                                <FormattedMessage id='enter_promo' defaultMessage=\"Enter a promo code\" />\n                            </Button>\n                        </div>\n                        <Collapse in={openPromo} className={classes.additionalContent}>\n                            <PromoCodeComponent />\n                        </Collapse>\n                        <div className={classes.additionalTitle} >                      \n                            <Button \n                                className={classes.themeTextColor}\n                                onClick={handleOpenNote}    \n                            >\n                                <DescriptionOutlinedIcon fontSize='small' style={{marginRight: \"8px\"}} />\n                                <FormattedMessage id='add_note' defaultMessage=\"Add a note\" />\n                            </Button>\n                        </div>\n                        <Collapse in={openNote} className={classes.additionalContent}>\n                            <AddNoteComponent />\n                        </Collapse>\n                    </div>\n                </div>\n                <div className={classes.gridSummary}>\n                    {\n                        cartList?.length > 0\n                        &&\n                        <>\n                        <Hidden smDown>\n                        <div className={classes.title}>\n                            <Typography variant='h5' component='h2'>\n                                <FormattedMessage id='order_summary' defaultMessage=\"Order Summmary\" />\n                            </Typography>\n                        </div>\n                        </Hidden>\n                        <Paper className={classes.summaryPaper}>\n                            <div className={classes.subtotal}>\n                                <Typography variant='body1' component='h2'>\n                                    <FormattedMessage id='subtotal' defaultMessage=\"Subtotal\" />\n                                </Typography>\n                                <Typography variant='body1' component='h2'>\n                                    {subtotalDeclare}\n                                </Typography>\n                            </div>\n                            <div  className={classes.shippingSection}>\n                                <Typography variant='body1' component='h2'>\n                                    <FormattedMessage id='shipping_region' defaultMessage=\"Shipping region\" />\n                                </Typography>\n                                {\n                                    countries?.length > 0\n                                    &&\n                                    <Autocomplete \n                                        value={selectedCountry} \n                                        onChange={(event, newValue) => handleCountry(event, newValue)}\n                                        inputValue={inputCountry}\n                                        onInputChange={(event, newInputValue) => {\n                                            setInputCountry(newInputValue);\n                                        }}\n                                        options={countries}\n                                        getOptionLabel={(option) => option?.name || \"\"}\n                                        className={classes.autocomplete}\n                                        renderOption={(option) => (\n                                            <div>\n                                                {`${option.flag}  ${option.name}`}\n                                            </div>\n                                        )}\n                                        renderInput={(params) => (\n                                            <TextField {...params} \n                                                label={selectCountryTransl} \n                                                variant=\"outlined\"\n                                            />\n                                        )}\n                                    />\n                                }\n                                <Collapse in={selectedCountry?.name?.length > 0}>\n                                    {\n                                        states?.length > 0\n                                        &&\n                                        <Autocomplete \n                                            value={selectedState} \n                                            onChange={(event, newValue) => handleState(event, newValue)}\n                                            inputValue={inputState}\n                                            onInputChange={(event, newInputValue) => {\n                                                setInputState(newInputValue);\n                                            }}\n                                            options={states}\n                                            getOptionLabel={(option) => option?.name || \"\"}\n                                            className={classes.autocomplete}\n                                            renderInput={(params) => (\n                                                <TextField {...params} \n                                                    label={selectStateTranls} \n                                                    variant=\"outlined\"\n                                                />\n                                            )}\n                                        />\n                                    }\n                                </Collapse>\n                                <Collapse in={selectedState?.name?.length > 0}>\n                                    {\n                                        cities?.length > 0\n                                        &&\n                                        <Autocomplete \n                                            value={selectedCity} \n                                            onChange={(event, newValue) => handleCity(event, newValue)}\n                                            inputValue={inputCity}\n                                            onInputChange={(event, newInputValue) => {\n                                                setInputCity(newInputValue);\n                                            }}\n                                            options={cities}\n                                            getOptionLabel={(option) => option?.name || \"\"}\n                                            className={classes.autocomplete}\n                                            renderInput={(params) => (\n                                                <TextField {...params} \n                                                    label={selectCityTranls} \n                                                    variant=\"outlined\"\n                                                />\n                                            )}\n                                        />\n                                    }\n                                </Collapse>\n                                <Collapse in={!shippingFeeLoading && shippingFeeInfo && Object.keys(shippingFeeInfo).length > 0}>\n                                    {\n                                        shippingFeeInfo?.isAllow\n                                        ?\n                                        <>\n                                        <div className={classes.subtotal}>\n                                            <Typography variant='body1' component='h2'>\n                                                <FormattedMessage id='shipping_fee' defaultMessage=\"Shipping fee\" />\n                                            </Typography>\n                                            <Typography variant='body1' component='h2'>\n                                                {shippingFeeCalc({fee: shippingFeeInfo.fee})}\n                                            </Typography>\n                                        </div>\n                                        <Divider/>\n                                        <div className={classes.total}>\n                                            <Typography variant='h5' component='h2'>\n                                                <FormattedMessage id='total' defaultMessage=\"Total\" />\n                                            </Typography>\n                                            <Typography variant='h5' component='h2'>\n                                                {totalSumCalc({number: totalSum})}\n                                            </Typography>\n                                        </div>\n                                        </>\n                                        :\n                                        <Typography variant=\"body1\" component='p'>\n                                            <FormattedMessage id='shipping_not_allowed' defaultMessage=\"Sorry, we haven't supported shipping to that region yet.\" />\n                                        </Typography>\n                                    }\n                                </Collapse>\n                            </div>\n                        </Paper>\n                        <Paper className={classes.checkoutPaper}>\n                            <Button \n                                className={classes.checkoutButton} \n                                disabled={!totalSum || !(totalSum > 0)}\n                                onClick={handleCheckout}\n                            >\n                                <Typography variant='h6' component='p'>\n                                    <FormattedMessage id='checkout' defaultMessage=\"Checkout\" />\n                                </Typography>\n                            </Button>\n                        </Paper>\n                        </> \n                    }\n                </div>\n            </Container>\n        </div>\n    )\n}\n\nexport default Checkout;","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/PageNotFound/index.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/AboutUs/index.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/features/CartBar.styles.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/features/NavBar.styles.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/features/AuthPopup.styles.js",["250"],"\nimport { makeStyles } from '@material-ui/core/styles';\nimport { LIGHT_WHITE } from '../../utils/theme';\n\nconst useStyles = makeStyles((theme) => ({\n    tabContent: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        textAlign: \"center\",\n        whiteSpace: 'pre-line',\n        maxWidth: theme.spacing(50),\n        padding: theme.spacing(5, 2, 7, 2),\n    },\n    iconBox: {\n        margin: theme.spacing(1, 0, 1, 0),\n    },\n    icon: {\n        height: theme.spacing(5),\n    },\n    welcome: {\n        marginBottom: theme.spacing(2),\n    },\n    form: {\n\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 3),\n    },\n}));\n\nexport default useStyles;","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/constants/orderConstants.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/constants/productConstants.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/constants/userConstants.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/Bookstore/Catalogue.js",["251"],"\nimport { useContext, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport useStyle_Catalogue from './Catalogue.styles';\nimport clsx from 'clsx';\nimport { Collapse, IconButton, InputBase, Typography } from '@material-ui/core';\nimport MinusIcon from '@material-ui/icons/Remove';\nimport AddIcon from '@material-ui/icons/Add';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { getBookGenres } from '../../../actions/productActions';\nimport RedirectOpenContext from '../../../contexts/RedirectOpenContext';\n\nconst DesignPlacehoder = ({ intl, handleSearch, sendKeyword }) => {\n    const classes = useStyle_Catalogue();\n    const placeholder = intl.formatMessage({ id: 'search', defaultMessage: 'Search' });\n    const [inputValue, setInputValue] = useState('');\n    const clickSearch = () => {\n        setInputValue(sendKeyword(inputValue));\n    }\n    return (\n        <>\n        <InputBase placeholder={`${placeholder}...`}\n            classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput,\n            }}\n            inputProps={{ 'aria-label': 'search' }}\n            value={inputValue}\n            onChange={e => setInputValue(e.target.value)}\n            onKeyPress={e => handleSearch(e)}\n        />\n        <IconButton className={clsx(classes.buttonHover, classes.searchIcon)} onClick={clickSearch}>\n            <SearchIcon />\n        </IconButton >\n        </>\n    );\n}\n\nconst Catalogue = ({ noLastBorderBottom = false }) => {\n    const classes = useStyle_Catalogue();\n    const history = useHistory()\n    const dispatch = useDispatch();\n    const { setRedirectOpen } = useContext(RedirectOpenContext);\n    const SearchComponent = injectIntl(({intl}) => \n        <DesignPlacehoder intl={intl} handleSearch={handleSearch} sendKeyword={sendKeyword}/>\n    );\n    const { genres } = useSelector(state => state.bookGenres);\n    const [allbooksOpen, setAllbooksOpen] = useState(true);\n    const [vietnameseOpen, setVietnameseOpen] = useState(false);\n    const [asianOpen, setAsianOpen] = useState(false);\n    const [westernOpen, setWesternOpen] = useState(false);\n    const [genresOpen, setGenresOpen] = useState(false);\n    useEffect(() => {\n        dispatch(getBookGenres());\n    }, []);\n    const handleSearch = (e) => {\n        // Activate on Enter key\n        if (e.which === 13) {\n            getCollection({keyword: e.target.value});\n            e.target.value = '';\n        }\n    };\n    const sendKeyword = (keyword) => {\n        getCollection({keyword});\n        return '';\n    }\n    const sellectAllBooks = (e) => {\n        setAllbooksOpen(true);\n        setVietnameseOpen(false);\n        setAsianOpen(false);\n        setWesternOpen(false);\n        setGenresOpen(false);\n        getCollection({});\n    };\n    const sellectVietnamese = (e) => {\n        setAllbooksOpen(false);\n        setVietnameseOpen(true);\n        setAsianOpen(false);\n        setWesternOpen(false);\n        setGenresOpen(false);\n        getCollection({origin: 'vietnamese'});\n    };\n    const sellectAsian = (e) => {\n        setAllbooksOpen(false);\n        setVietnameseOpen(false);\n        setAsianOpen(asianOpen ? false : true);\n        setWesternOpen(false);\n        setGenresOpen(false);\n    };\n    const sellectWestern = (e) => {\n        setAllbooksOpen(false);\n        setVietnameseOpen(false);\n        setAsianOpen(false);\n        setWesternOpen(westernOpen ? false : true);\n        setGenresOpen(false);\n    };\n    const sellectGenres = (e) => {\n        setAllbooksOpen(false);\n        setVietnameseOpen(false);\n        setAsianOpen(false);\n        setWesternOpen(false);\n        setGenresOpen(genresOpen ? false : true);\n    };\n    const getCollection = ({keyword, genre, origin}) => {\n        history.push(`/bookstore?${\n            keyword ? `keyword=${keyword}&` : ''\n        }${\n            genre ? `genre=${genre}&` : ''\n        }${\n            origin ? `origin=${origin}` : ''\n        }`);\n        setRedirectOpen(false);\n    }\n    return(\n        <div className={classes.container}>\n            <div className={clsx(classes.search)}>\n                <SearchComponent />\n            </div>\n            <div className={clsx(classes.section, classes.borderBottom)}>\n                <IconButton \n                    className={clsx(classes.title, classes.buttonHover, allbooksOpen && classes.onSellected)}\n                    onClick={sellectAllBooks}\n                    >\n                    <Typography variant='body1'>\n                        <FormattedMessage id='all_books' defaultMessage='All Books' />\n                    </Typography>\n                </IconButton>\n            </div>\n            <div className={clsx(classes.section, classes.borderBottom)}>\n                <IconButton \n                    className={clsx(classes.title, classes.buttonHover, genresOpen && classes.onSellected)}\n                    onClick={sellectGenres}\n                    >\n                    <Typography variant='body1'>\n                        <FormattedMessage id='genres' defaultMessage='Genres' />\n                    </Typography>\n                    {\n                        genresOpen\n                        ?\n                        <MinusIcon />\n                        :\n                        <AddIcon />\n                    }\n                </IconButton>\n                <Collapse in={genresOpen}>\n                {\n                    genres?.length > 0\n                    &&\n                    <div className={classes.subsection}>\n                        {\n                            genres.map((genre, i) => (\n                                <IconButton\n                                    key={i} onClick={e => getCollection({genre: genre._id})}\n                                    className={clsx(classes.subtitle, classes.buttonHover)}\n                                    >\n                                    <Typography variant='body1'>\n                                        <FormattedMessage id={genre._id} defaultMessage={genre._id} />\n                                    </Typography>\n                                </IconButton>\n                            ))\n                        }\n                    </div>\n                }\n                </Collapse>\n            </div>\n            <div className={clsx(classes.section, classes.borderBottom)}>\n                <IconButton \n                    className={clsx(classes.title, classes.buttonHover, vietnameseOpen && classes.onSellected)}\n                    onClick={sellectVietnamese}\n                    >\n                    <Typography variant='body1'>\n                        <FormattedMessage id='vi_literature' defaultMessage='Vietnamese Literature' />\n                    </Typography>\n                </IconButton>\n            </div>\n            <div className={clsx(classes.section, classes.borderBottom)}>\n                <IconButton \n                    className={clsx(classes.title, classes.buttonHover, asianOpen && classes.onSellected)}\n                    onClick={sellectAsian}\n                    >\n                    <Typography variant='body1'>\n                        <FormattedMessage id='asian_literature' defaultMessage='Asian Literature' />\n                    </Typography>\n                    {\n                        asianOpen\n                        ?\n                        <MinusIcon />\n                        :\n                        <AddIcon />\n                    }\n                </IconButton>\n                <Collapse in={asianOpen}>\n                    <div className={classes.subsection}>\n                        <IconButton\n                            className={clsx(classes.subtitle, classes.buttonHover)}\n                            onClick={e => getCollection({origin: 'japanese'})}\n                            >\n                            <Typography variant='body1'>\n                                <FormattedMessage id='japanese' defaultMessage='Japanese' />\n                            </Typography>\n                        </IconButton>\n                        <IconButton\n                            className={clsx(classes.subtitle, classes.buttonHover)}\n                            onClick={e => getCollection({origin: 'chinese'})}\n                            >\n                            <Typography variant='body1'>\n                                <FormattedMessage id='chinese' defaultMessage='Chinese' />\n                            </Typography>\n                        </IconButton>\n                        <IconButton\n                            className={clsx(classes.subtitle, classes.buttonHover)}\n                            onClick={e => getCollection({origin: 'asian'})}\n                            >\n                            <Typography variant='body1'>\n                                <FormattedMessage id='asian' defaultMessage='Other' />\n                            </Typography>\n                        </IconButton>\n                    </div>\n                </Collapse>\n            </div>\n            <div className={clsx(classes.section, !noLastBorderBottom && classes.borderBottom)}>\n                <IconButton \n                    className={clsx(classes.title, classes.buttonHover, westernOpen && classes.onSellected)}\n                    onClick={sellectWestern}\n                    >\n                    <Typography variant='body1'>\n                        <FormattedMessage id='western_literature' defaultMessage='Western Literature' />\n                    </Typography>\n                    {\n                        westernOpen\n                        ?\n                        <MinusIcon />\n                        :\n                        <AddIcon />\n                    }\n                </IconButton>\n                <Collapse in={westernOpen}>\n                    <div className={classes.subsection}>\n                        <IconButton\n                            className={clsx(classes.subtitle, classes.buttonHover)}\n                            onClick={e => getCollection({origin: 'american'})}\n                            >\n                            <Typography variant='body1'>\n                                <FormattedMessage id='american' defaultMessage='American' />\n                            </Typography>\n                        </IconButton>\n                        <IconButton\n                            className={clsx(classes.subtitle, classes.buttonHover)}\n                            onClick={e => getCollection({origin: 'english'})}\n                            >\n                            <Typography variant='body1'>\n                                <FormattedMessage id='english' defaultMessage='English' />\n                            </Typography>\n                        </IconButton>\n                        <IconButton\n                            className={clsx(classes.subtitle, classes.buttonHover)}\n                            onClick={e => getCollection({origin: 'russian'})}\n                            >\n                            <Typography variant='body1'>\n                                <FormattedMessage id='russian' defaultMessage='Russian' />\n                            </Typography>\n                        </IconButton>\n                        <IconButton\n                            className={clsx(classes.subtitle, classes.buttonHover)}\n                            onClick={e => getCollection({origin: 'western'})}\n                            >\n                            <Typography variant='body1'>\n                                <FormattedMessage id='western' defaultMessage='Other' />\n                            </Typography>\n                        </IconButton>\n                    </div>\n                </Collapse>\n            </div>\n        </div>\n    )\n}\n\nexport default Catalogue;","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/features/RedirectBar.styles.js",["252"],"import { makeStyles } from '@material-ui/styles';\nimport { fade } from '@material-ui/core/styles';\nimport { LIGHT_WHITE, DARK_BLUE } from '../../utils/theme';\n\nconst useStyles = makeStyles((theme) => ({\n    iconButton: {\n        color: theme.palette.text.main,\n    },\n    redirectBar: {\n        display: 'flex',\n    },\n    drawerPaper: {\n        backgroundColor: theme.palette.background.main,\n        color: theme.palette.text.main,\n    },\n    redirectBarHeader: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        height: theme.spacing(7),\n        width: theme.spacing(45),\n        color: LIGHT_WHITE,\n        backgroundColor: theme.palette.sidebarHeader.main,\n        [theme.breakpoints.up('sm')]: {\n            height: theme.spacing(8),\n        },\n    },\n    redirectBarIconClose: {\n        position: 'absolute',\n        color: LIGHT_WHITE,\n        '&:hover': {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n    },\n    redirectBarTitle: {\n        flexGrow: 1,\n        textAlign: 'center',\n    },\n    accordion: {\n        backgroundColor: theme.palette.background.main,\n        color: theme.palette.text.main,\n    },\n}))\n\nexport default useStyles;","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/actions/userActions.js",["253"],"\nimport axios from 'axios';\nimport Cookie from 'js-cookie';\nimport {\n    USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS, USER_SIGNIN_FAIL, \n    USER_REGISTER_REQUEST, \n    USER_SIGNOUT,\n    CLEAR_USER_SIGNIN_ERRORS, \n} from '../constants/userConstants';\n\nconst authConfig = (userInfo) => {\n    return {\n        headers: {\n            'Authorization': 'Bearer ' + userInfo.token,\n        }\n    }\n}\n\nconst signin = ({email, password}) => async (dispatch) => {\n    dispatch({ type: USER_SIGNIN_REQUEST, payload: { email, password } });\n    try {\n        const { data } = await axios.post(\"/api/users/signin\", { email, password });\n        const { _id, firstName, lastName, nickName, isAdmin, email: userEmail, token, } = data;\n        const userInfo = { _id, firstName, lastName, nickName, isAdmin, userEmail, token, };\n        dispatch({ type: USER_SIGNIN_SUCCESS, payload: userInfo });\n        Cookie.set('userInfo', JSON.stringify(userInfo));\n    } catch (error) {\n        dispatch({ type: USER_SIGNIN_FAIL, payload: error.response?.data || error });\n    }\n}\n\nconst register = ({ firstName, lastName, email, password, rePassword }) => async (dispatch) => {\n    dispatch({ type: USER_REGISTER_REQUEST, payload: { firstName, lastName, email, password, rePassword } });\n    try {\n        const { data } = await axios.post(\"/api/users/register\", { firstName, lastName, email, password, rePassword });\n        dispatch({ type: USER_SIGNIN_SUCCESS, payload: data });\n        Cookie.set('userInfo', JSON.stringify(data));\n    } catch (error) {\n        dispatch({ type: USER_SIGNIN_FAIL, payload: error.response?.data || error });\n    }\n}\n\nconst signout = () => (dispatch) => {\n    dispatch({ type: USER_SIGNOUT });\n}\n\nconst clearUserSigninErros = () => (dispatch) => {\n    dispatch({ type: CLEAR_USER_SIGNIN_ERRORS });\n}\n\nexport { signin, register, signout, clearUserSigninErros }","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/actions/productActions.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/AboutUs/styles.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/Bookstore/Catalogue.styles.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/utils/priceCalculator.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/actions/orderActions.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/Checkout/styles.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/OrderProcess/FormComplete.js",["254"],"\nimport { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport useStyles from './styles';\nimport { Button } from '@material-ui/core';\nimport orderCompletedImage from '../../../images/payment/order_completed.jpg';\nimport { removeAllLocalCart } from '../../../actions/productActions';\n\nconst FormComplete = () => {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(removeAllLocalCart());\n    }, []);\n    return (\n        <>\n        <img src={orderCompletedImage} alt=\"Order Completed\" className={classes.formComplete} />\n        <Link to=\"/\" className={classes.goHomeLink} >\n            <Button className={classes.goHomeButton}/>\n        </Link>\n        <a className={classes.attribute} href=\"http://www.freepik.com\" target='_blank' rel=\"noreferrer\">\n            Image designed by stories / Freepik\n        </a>\n        </>\n    )\n}\n\nexport default FormComplete;","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/OrderProcess/FormPayment.js",["255","256","257","258"],"\nimport { useContext, useEffect, useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport clsx from 'clsx';\nimport axios from 'axios';\nimport useStyles from './styles';\nimport {\n    CardNumberElement,\n    CardExpiryElement,\n    CardCvcElement,\n} from \"@stripe/react-stripe-js\";\nimport StripeInput from './StripeInput';\nimport { Button, CircularProgress, Collapse, Divider, FormControl, FormControlLabel, Radio, RadioGroup, TextField, Typography } from '@material-ui/core';\nimport { shippingFeeCalc, totalSumCalc, totalSumNumber, wholeSaleCalc } from '../../../utils/priceCalculator';\nimport paypalImage from '../../../images/payment/paypal.png';\nimport maestroImage from '../../../images/payment/maestro.png';\nimport mastercardImage from '../../../images/payment/mastercard.png';\nimport visaImage from '../../../images/payment/visa.png';\n\nconst MODE_PAYMENT_CASH = \"cash\";\nconst MODE_PAYMENT_CREDIT = \"credit\";\nconst MODE_PAYMENT_PAYPAL = \"paypal\";\n\nconst FormPayment = ({handleBack, handleNext, activeStep}) => {\n    const classes = useStyles();\n    const history = useHistory();\n    const intl = useIntl();\n    const cardNumberTransl = intl.formatMessage({id: 'card_number', defaultMessage: \"Card number\"});\n    const expireDateTransl = intl.formatMessage({id: 'expire_date', defaultMessage: \"Expiration date\"});\n    const { country, state, city, loading: shippingFeeLoading, info: shippingFeeInfo } = useSelector(state => state.shippingAddress);\n    const { cartList } = useSelector(state => state.cart);\n    const { firstName, lastName, email, phone, addressDetail } = useSelector(state => state.orderFormShipping);\n    const [ modePayment, setModePayment ] = useState(MODE_PAYMENT_CASH);\n    const [ paymentProcessing, setPaymentProcessing] = useState(false);\n    const [ paymentError, setPaymentError ] = useState();\n\n    useEffect(() => {\n        if (cartList.length === 0 && activeStep === 1) history.replace(\"/checkout/\");\n    }, [cartList]);\n\n    const changeModePayment = (e) => {\n        setPaymentError();\n        setModePayment(e.target.value);\n    }\n    const submitPayment = async (e) => {\n        setPaymentError();\n        setPaymentProcessing(true);\n        switch (modePayment) {\n            case MODE_PAYMENT_CASH:\n                break;   \n            case MODE_PAYMENT_CREDIT:\n            case MODE_PAYMENT_PAYPAL:\n                setTimeout(() => {\n                    setPaymentProcessing(false);\n                    setPaymentError(true);\n                }, 5000)\n                break;\n            default:\n                return;\n        };\n        try {\n            const { order } = await axios.post(\"/api/orders/save_order/\", {\n                first_name: firstName,\n                last_name: lastName,\n                address_detail: addressDetail,\n                payment_method: modePayment,\n                items: cartList,\n                total: totalSumNumber({\n                    items: cartList,\n                    shippingFeeInfo,\n                }).decimalPlaces(2).toNumber(),\n                email, phone, city, state, country, currency: 'usd',\n            })\n            handleNext();\n        } catch (error) {\n            error?.response?.data?.errors.forEach(err => { \n                console.log(err.param);\n            });\n        }\n        setPaymentProcessing(false);\n    }\n    return (\n        <form className={classes.gridForm} noValidate={false} onSubmit={e => { e.preventDefault(); submitPayment(); }}>\n            <div className={classes.gridInput}>\n                <div className={clsx(classes.yourOrder, classes.singleField)}>\n                    <Typography variant='h6' component='p'>\n                        <FormattedMessage id='mode_payment' defaultMessage=\"Mode of payment\" />\n                    </Typography>\n                </div>\n                <Divider />\n                <FormControl className={classes.paymentBox}>\n                    <RadioGroup value={modePayment} onChange={changeModePayment}>\n                        <FormControlLabel\n                            label={intl.formatMessage({id: \"cash_on_delivery\", defaultMessage: \"Cash on delivery\" })}\n                            value={MODE_PAYMENT_CASH}\n                            control={<Radio color=\"primary\"  />}\n                        />\n                        <FormControlLabel\n                            label={intl.formatMessage({id: \"credit_card\", defaultMessage: \"Credit card\" })}\n                            value={MODE_PAYMENT_CREDIT}\n                            control={<Radio color=\"primary\"  />}\n                        />\n                        <Collapse in={modePayment === MODE_PAYMENT_CREDIT}>\n                            <div className={classes.singleField}>\n                                <TextField\n                                    InputLabelProps={{ \n                                        className: classes.textfieldLabel,\n                                        shrink: true,\n                                    }}\n                                    InputProps={{ \n                                        className: classes.textfieldInput,\n                                        inputComponent: StripeInput,\n                                        inputProps: {\n                                            component: CardNumberElement\n                                        },\n                                    }}\n                                    className={clsx(classes.cardNumber, classes.textfield)}\n                                    required variant=\"outlined\" fullWidth\n                                    label={cardNumberTransl}\n                                />\n                            </div>\n                            <div className={classes.pairField}>\n                                <TextField\n                                    InputLabelProps={{ \n                                        className: classes.textfieldLabel,\n                                        shrink: true,\n                                    }}\n                                    InputProps={{ \n                                        className: classes.textfieldInput,\n                                        inputComponent: StripeInput,\n                                        inputProps: {\n                                            component: CardExpiryElement\n                                        },\n                                    }}\n                                    className={clsx(classes.cardExpire, classes.textfield)}\n                                    required variant=\"outlined\"\n                                    label={expireDateTransl}\n                                />\n                                <TextField\n                                    InputLabelProps={{ \n                                        className: classes.textfieldLabel,\n                                        shrink: true,\n                                    }}\n                                    InputProps={{ \n                                        className: classes.textfieldInput, \n                                        inputComponent: StripeInput,\n                                        inputProps: {\n                                            component: CardCvcElement\n                                        },\n                                    }}\n                                    className={clsx(classes.cardCVC, classes.textfield)}\n                                    required variant=\"outlined\"\n                                    label=\"CVC\"\n                                />\n                            </div>\n                        </Collapse>\n                        <FormControlLabel\n                            label={intl.formatMessage({id: \"paypal\", defaultMessage: \"Paypal\" })}\n                            value={MODE_PAYMENT_PAYPAL}\n                            control={<Radio color=\"primary\"  />}\n                        />\n                        <div className={classes.creditImages}>\n                            <img src={visaImage} alt=\"paypal card\" className={classes.creditImage} />\n                            <img src={mastercardImage} alt=\"paypal card\" className={classes.creditImage} />\n                            <img src={maestroImage} alt=\"paypal card\" className={classes.creditImage} />\n                        </div>\n                        <img src={paypalImage} alt=\"paypal card\" className={classes.paypalImage} />\n                    </RadioGroup>\n                </FormControl>\n                <div className={clsx(classes.yourOrder, classes.singleField)}>\n                    <Typography variant='h6' component='p'>\n                        <FormattedMessage id='recipient' defaultMessage=\"Recipient\" />\n                    </Typography>\n                    <div onClick={handleBack} className={classes.link} >\n                        <Typography variant=\"body2\" component='p'>\n                            {\"(\"}\n                            <FormattedMessage id='edit_recipient_info' defaultMessage=\"Edit recipient information\" />\n                            {\")\"}\n                        </Typography>\n                    </div>\n                </div>\n                <Divider />\n                <div>\n                    <div className={classes.singleField}>\n                        <Typography variant='body1' component='p'>\n                            <FormattedMessage id='fullname' defaultMessage=\"Name\" />\n                            {`: ${lastName} ${firstName}`}\n                        </Typography>\n                    </div>\n                    <div className={classes.singleField}>\n                        <Typography variant='body1' component='p'>\n                            <FormattedMessage id='phone' defaultMessage=\"Phone\" />\n                            {`: (+${country.phonecode}) ${phone}`}\n                        </Typography>\n                    </div>\n                    <div className={classes.singleField}>\n                        <Typography variant='body1' component='p'>\n                            <FormattedMessage id='email' defaultMessage=\"Email\" />\n                            {`: ${email}`}\n                        </Typography>\n                    </div>\n                    <div className={classes.singleField}>\n                        <Typography variant='body1' component='p'>\n                            <FormattedMessage id='address' defaultMessage=\"Address\" />\n                            {`: ${addressDetail}, ${city.name}, ${state.name}, ${country.name}.`}\n                        </Typography>\n                    </div>\n                </div>\n            </div>\n            <div className={classes.gridSummary}>\n                <div className={clsx(classes.yourOrder, classes.singleField)}>\n                    <Typography variant='h6' component='p'>\n                        <FormattedMessage id='your_order' defaultMessage=\"Your order\" />\n                    </Typography>\n                    <Link to=\"/checkout/\" className={classes.link}>\n                        <Typography variant=\"body2\" component='p'>\n                            {\"(\"}\n                            <FormattedMessage id='edit_cart' defaultMessage=\"Edit cart\" />\n                            {\")\"}\n                        </Typography>\n                    </Link>\n                </div>\n                <Divider />\n                <div className={classes.listItems}>\n                    {\n                        cartList.map((item, i) => (\n                            <div key={i} className={classes.item}>\n                                <div style={{ display: 'flex' }}>\n                                    <Typography variant='body1' component='p' className={classes.itemTitle} >\n                                        {item.title}\n                                    </Typography>\n                                    { \n                                    item.quantity > 1 \n                                    && \n                                    <Typography variant='body1' component='p'>\n                                        x{item.quantity}\n                                    </Typography> }\n                                </div>\n                                <Typography \n                                    className={classes.price}\n                                    variant='body1' component='p'\n                                >\n                                    {wholeSaleCalc(item)}\n                                </Typography>\n                            </div>\n                        ))\n                    }\n                </div>\n                <Divider />\n                {\n                    !shippingFeeLoading && !isNaN(shippingFeeInfo?.fee)\n                    &&\n                    <>\n                    <div className={classes.item} style={{paddingBottom: \"8px\"}}>\n                        <Typography variant='body1' component='p' >\n                            <FormattedMessage id='shipping_fee' defaultMessage=\"Shippng fee\" />    \n                        </Typography>\n                        <Typography variant='body1' component='p' className={classes.price} >\n                            {shippingFeeCalc({ fee: shippingFeeInfo.fee })}\n                        </Typography>\n                    </div>\n                    <Divider />\n                    <div className={classes.item} style={{paddingBottom: \"24px\"}}>\n                        <Typography variant='h6' component='p' >\n                            <FormattedMessage id='total' defaultMessage=\"Total\" />    \n                        </Typography>\n                        <Typography variant='h6' component='p' className={classes.totalPrice} >\n                            {totalSumCalc({ \n                                number: totalSumNumber({\n                                    items: cartList,\n                                    shippingFeeInfo,\n                                }),\n                            })}\n                        </Typography>\n                    </div>\n                    <Button className={classes.paymentButton} type=\"submit\" disabled={paymentProcessing}>\n                        {\n                            paymentProcessing\n                            ?\n                            <CircularProgress size={30} classes={{ colorPrimary: classes.circularProgress }} />\n                            :\n                            <Typography variant='h6' component='p'>\n                                <FormattedMessage id='pay' defaultMessage=\"Pay\" />\n                                {` ${totalSumCalc({ \n                                    number: totalSumNumber({\n                                        items: cartList,\n                                        shippingFeeInfo,\n                                    }),\n                                })}`}\n                            </Typography>\n                        }\n                    </Button>\n                    <Collapse in={paymentError} className={classes.paymentError}>\n                        <Typography variant='body1' component='p' color=\"secondary\" >\n                            <FormattedMessage id='payment_error' defaultMessage=\"Payment error. Please try other payment method.\" />    \n                        </Typography>\n                    </Collapse>\n                    </>\n                }\n            </div>\n        </form> \n    )\n}\n\nexport default FormPayment;","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/OrderProcess/FormShipping.js",["259","260"],"\nimport { useEffect, useState } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport clsx from 'clsx';\nimport axios from 'axios';\nimport useStyles from './styles';\nimport { Button, Divider, InputAdornment, TextField, Typography } from '@material-ui/core';\nimport { shippingFeeCalc, totalSumCalc, totalSumNumber, wholeSaleCalc } from '../../../utils/priceCalculator';\nimport { saveOrderFormShipping } from '../../../actions/orderActions';\n\nconst TYPE_FIRSTNAME = \"TYPE_FIRSTNAME\";\nconst TYPE_LASTNAME = \"TYPE_LASTNAME\";\nconst TYPE_EMAIL = \"TYPE_EMAIL\";\nconst TYPE_PHONE = \"TYPE_PHONE\";\nconst TYPE_ADDRESS = \"TYPE_ADDRESS\";\n\nconst FormShipping = ({handleNext, activeStep}) => {\n    const classes = useStyles();\n    const history = useHistory();\n    const dispatch = useDispatch();\n    const intl = useIntl();\n    const firstnameTransl = intl.formatMessage({id: 'firstname', defaultMessage: \"First Name\"});\n    const lastnameTransl = intl.formatMessage({id: 'lastname', defaultMessage: \"Last Name\"});\n    const emailTransl = intl.formatMessage({id: 'email', defaultMessage: \"Email\"});\n    const phoneTransl = intl.formatMessage({id: 'phone', defaultMessage: \"Phone Number\"});\n    const shippingDetailTransl = intl.formatMessage({id: 'shipping_addr_detail', defaultMessage: \"Shipping address detail\"});\n    const cityTransl = intl.formatMessage({id: 'city', defaultMessage: \"City\"});\n    const stateTransl = intl.formatMessage({id: 'state', defaultMessage: \"State\"});\n    const countryTransl = intl.formatMessage({id: 'country', defaultMessage: \"Country\"});\n    const { country, state, city, loading: shippingFeeLoading, info: shippingFeeInfo } = useSelector(state => state.shippingAddress);\n    const { cartList } = useSelector(state => state.cart);\n    const { firstName, lastName, email, phone, addressDetail } = useSelector(state => state.orderFormShipping);\n    const [ firstNameError, setFirstNameError ] = useState();\n    const [ lastNameError, setLastNameError ] = useState();\n    const [ emailError, setEmailError ] = useState();\n    const [ phoneError, setPhoneError ] = useState();\n    const [ addressDetailError, setAddressDetailError ] = useState();\n\n    useEffect(() => {\n        if (cartList.length === 0 && activeStep === 0) history.replace(\"/checkout/\");\n    }, [cartList]);\n\n    const handleTextField = (value, type) => {\n        const data = {};\n        switch (type) {\n            case TYPE_FIRSTNAME:\n                data.firstName = value;\n                break;\n            case TYPE_LASTNAME:\n                data.lastName = value;\n                break;\n            case TYPE_EMAIL:\n                data.email = value;\n                break;\n            case TYPE_PHONE:\n                data.phone = value;\n                break;\n            case TYPE_ADDRESS:\n                data.addressDetail = value;\n                break;\n            default:\n                return;\n        }\n        dispatch(saveOrderFormShipping(data));\n    }\n    const resetError = () => {\n        setFirstNameError(); setLastNameError(); setEmailError(); setPhoneError(); setAddressDetailError();\n    };\n    const submitShipping = async (e) => {\n        e.preventDefault();\n        try {\n            const response = await axios.post(\"/api/orders/validate_shipping\",\n                            {\n                                first_name: firstName,\n                                last_name: lastName,\n                                email, phone,\n                                address_detail: addressDetail,\n                            });\n            if(response.data.isValidate) {\n                resetError();\n                handleNext(); \n            }\n        } catch (error) {\n            error?.response?.data?.errors?.map(err => {\n                switch(err.param) {\n                    case \"first_name\":\n                        setFirstNameError(intl.formatMessage({id: err.msg, defaultMessage: err.msg}));\n                        break;\n                    case \"last_name\":\n                        setLastNameError(intl.formatMessage({id: err.msg, defaultMessage: err.msg}));\n                        break;\n                    case \"email\":\n                        setEmailError(intl.formatMessage({id: err.msg, defaultMessage: err.msg}));\n                        break;\n                    case \"phone\":\n                        setPhoneError(intl.formatMessage({id: err.msg, defaultMessage: err.msg}));\n                        break;  \n                    case \"address_detail\":\n                        setAddressDetailError(intl.formatMessage({id: err.msg, defaultMessage: err.msg}));\n                        break;\n                    default:\n                        break;\n                }\n            })\n        }\n    };\n    return (\n        <form className={classes.gridForm} noValidate={false} onSubmit={submitShipping}>\n            <div className={classes.gridInput}>\n                <div className={classes.singleField}>\n                    <Typography variant='h6' component='p'>\n                        <FormattedMessage id='recipient' defaultMessage=\"Recipient\" />\n                    </Typography>\n                </div>\n                <div className={classes.pairField}>\n                    <TextField\n                        InputLabelProps= {{ className: classes.textfieldLabel }}\n                        InputProps={{ className: classes.textfieldInput }}\n                        className={clsx(classes.firstname, classes.textfield)}\n                        required variant=\"outlined\" fullWidth autoFocus\n                        label={firstnameTransl}\n                        onChange={(e) => handleTextField(e.target.value, TYPE_FIRSTNAME)}\n                        // value={firstName}\n                        error={firstNameError}\n                        helperText={firstNameError}\n                    />\n                    <TextField\n                        InputLabelProps= {{ className: classes.textfieldLabel }}\n                        InputProps={{ className: classes.textfieldInput }}\n                        className={clsx(classes.lastname, classes.textfield)}\n                        required variant=\"outlined\" fullWidth\n                        label={lastnameTransl}\n                        onChange={(e) => handleTextField(e.target.value, TYPE_LASTNAME)}\n                        // value={lastName}\n                        error={lastNameError}\n                        helperText={lastNameError}\n                    />\n                </div>\n                <div className={classes.pairField}>\n                    <TextField\n                        InputLabelProps= {{ className: classes.textfieldLabel }}\n                        InputProps={{ className: classes.textfieldInput }}\n                        className={clsx(classes.email, classes.textfield)}\n                        type=\"email\" autoComplete=\"email\"\n                        required variant=\"outlined\" fullWidth\n                        label={emailTransl}\n                        onChange={(e) => handleTextField(e.target.value, TYPE_EMAIL)}\n                        // value={email}\n                        error={emailError}\n                        helperText={emailError}\n                    />\n                    <TextField\n                        InputLabelProps= {{ className: classes.textfieldLabel }}\n                        InputProps={{ \n                            className: classes.textfieldInput,\n                            startAdornment: <InputAdornment \n                                                classes={{ positionStart: classes.inputAdornment }} \n                                                position=\"start\"\n                                            >\n                                                {`(+${country?.phonecode})`}\n                                            </InputAdornment>,\n                        }}\n                        className={clsx(classes.phone, classes.textfield)}\n                        required variant=\"outlined\" fullWidth\n                        label={phoneTransl} type=\"tel\"\n                        onChange={(e) => handleTextField(e.target.value, TYPE_PHONE)}\n                        // value={phone}\n                        error={phoneError}\n                        helperText={phoneError}\n                    />\n                </div>\n                <div className={classes.singleField}>\n                    <TextField\n                        InputLabelProps= {{ className: classes.textfieldLabel }}\n                        InputProps={{ className: classes.textfieldInput }}\n                        className={clsx(classes.textfield)}\n                        required variant=\"outlined\" fullWidth\n                        label={shippingDetailTransl}\n                        onChange={(e) => handleTextField(e.target.value, TYPE_ADDRESS)}\n                        // value={addressDetail}\n                        error={addressDetailError}\n                        helperText={addressDetailError}\n                    />\n                </div>\n                <div className={classes.pairField}>\n                    <TextField\n                        InputLabelProps= {{ className: classes.textfieldLabel }}\n                        InputProps={{ \n                            className: classes.textfieldInput, \n                            readOnly: true, \n                        }}\n                        className={clsx(classes.city, classes.textfield)}\n                        required variant=\"outlined\" fullWidth \n                        label={cityTransl} defaultValue={city?.name || \"\"}\n                    />\n                    <TextField\n                        InputLabelProps= {{ className: classes.textfieldLabel }}\n                        InputProps={{ \n                            className: classes.textfieldInput, \n                            readOnly: true, \n                        }}\n                        className={clsx(classes.state, classes.textfield)}\n                        required variant=\"outlined\" fullWidth\n                        label={stateTransl} defaultValue={state?.name || \"\"}\n                    />\n                </div>\n                <div className={classes.singleField}>\n                    <TextField\n                        InputLabelProps= {{ className: classes.textfieldLabel }}\n                        InputProps={{ \n                            className: classes.textfieldInput, \n                            readOnly: true, \n                        }}\n                        className={clsx(classes.textfield)}\n                        required variant=\"outlined\"\n                        label={countryTransl} \n                        defaultValue={`${country?.flag} ${country?.name}` || \"\"}\n                    />\n                    <Link to=\"/checkout/\" className={classes.link}>\n                        <Typography variant=\"body2\" component='p'>\n                            {\"(\"}\n                            <FormattedMessage id='edit_shipping_region' defaultMessage=\"Edit shipping region\" />\n                            {\")\"}\n                        </Typography>\n                    </Link>\n                </div>\n            </div>\n            <div className={classes.gridSummary}>\n                <div className={clsx(classes.yourOrder, classes.singleField)}>\n                    <Typography variant='h6' component='p'>\n                        <FormattedMessage id='your_order' defaultMessage=\"Your order\" />\n                    </Typography>\n                    <Link to=\"/checkout/\" className={classes.link}>\n                        <Typography variant=\"body2\" component='p'>\n                            {\"(\"}\n                            <FormattedMessage id='edit_cart' defaultMessage=\"Edit cart\" />\n                            {\")\"}\n                        </Typography>\n                    </Link>\n                </div>\n                <Divider />\n                <div className={classes.listItems}>\n                    {\n                        cartList.map((item, i) => (\n                            <div key={i} className={classes.item}>\n                                <div style={{ display: 'flex' }}>\n                                    <Typography variant='body1' component='p' className={classes.itemTitle} >\n                                        {item.title}\n                                    </Typography>\n                                    { \n                                    item.quantity > 1 \n                                    && \n                                    <Typography variant='body1' component='p'>\n                                        x{item.quantity}\n                                    </Typography> }\n                                </div>\n                                <Typography \n                                    className={classes.price}\n                                    variant='body1' component='p'\n                                >\n                                    {wholeSaleCalc(item)}\n                                </Typography>\n                            </div>\n                        ))\n                    }\n                </div>\n                <Divider />\n                {\n                    !shippingFeeLoading && !isNaN(shippingFeeInfo?.fee)\n                    &&\n                    <>\n                    <div className={classes.item} style={{paddingBottom: \"8px\"}}>\n                        <Typography variant='body1' component='p' >\n                            <FormattedMessage id='shipping_fee' defaultMessage=\"Shippng fee\" />    \n                        </Typography>\n                        <Typography variant='body1' component='p' className={classes.price} >\n                            {shippingFeeCalc({ fee: shippingFeeInfo.fee })}\n                        </Typography>\n                    </div>\n                    <Divider />\n                    <div className={classes.item} style={{paddingBottom: \"24px\"}}>\n                        <Typography variant='h6' component='p' >\n                            <FormattedMessage id='total' defaultMessage=\"Total\" />    \n                        </Typography>\n                        <Typography variant='h6' component='p' className={classes.totalPrice} >\n                            {totalSumCalc({ \n                                number: totalSumNumber({\n                                    items: cartList,\n                                    shippingFeeInfo,\n                                }),\n                            })}\n                        </Typography>\n                    </div>\n                    <Button className={classes.paymentButton} type=\"submit\">\n                        <Typography variant='h6' component='p'>\n                            <FormattedMessage id='continue_payment' defaultMessage=\"Continue to payment\" />\n                        </Typography>\n                    </Button>\n                    </>\n                }\n            </div>\n        </form>\n    )\n}\n\nexport default FormShipping;","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/OrderProcess/styles.js",["261"],"import { makeStyles } from '@material-ui/styles';\nimport { LIGHT_WHITE, DARK_BLACK } from '../../../utils/theme';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        position: 'relative',\n        top: theme.spacing(7),\n        backgroundColor: theme.palette.background.main,\n        color: theme.palette.text.main,\n        whiteSpace: 'pre-line',\n        minHeight: '90vh',\n        [theme.breakpoints.up('sm')]: {\n            top: theme.spacing(8),\n        },\n    },\n    container: {\n        position: 'absolute',\n        left: \"50%\",\n        transform: \"translateX(-50%)\",\n        backgroundColor: theme.palette.navBar.main,\n        display: 'grid',\n        gridTemplateColumns: '1fr',\n        gridTemplateRows: 'auto auto',\n        gridTemplateAreas: '\"gridStepper\" \"gridForm\"',\n        margin: theme.spacing(0, 0, 1, 0),\n        paddingBottom: theme.spacing(8),\n        borderRadius: theme.spacing(1.25),\n        [theme.breakpoints.up('md')]: {\n            margin: theme.spacing(10, 0, 3, 0),\n            paddingBottom: theme.spacing(3),\n        }\n    },\n    gridStepper: {\n        gridArea: \"gridStepper\",\n        marginTop: theme.spacing(5),\n    },\n    gridForm: {\n        gridArea: \"gridForm\",\n        display: 'grid',\n        gridTemplateColumns: '1fr',\n        gridTemplateRows: 'auto auto',\n        gridTemplateAreas: '\"gridInput\" \"gridSummary\"',\n        margin: theme.spacing(0, 0, 3, 0),\n        paddingBottom: theme.spacing(8),\n        [theme.breakpoints.up('sm')]: {\n            gridTemplateColumns: '3fr 2fr',\n            gridTemplateRows: '1fr',\n            gridTemplateAreas: '\"gridInput gridSummary\"',\n            gridGap: theme.spacing(5),\n        },\n    },\n    gridInput: {\n        gridArea: \"gridInput\",\n    },\n    gridSummary: {\n        gridArea: \"gridSummary\",\n    },\n    pairField: {\n        display: 'grid',\n        padding: theme.spacing(2, 0, 0, 0),\n        gridTemplateColumns: '1fr',\n        gridTemplateRows: '2fr',\n        gridTemplateAreas: '\"gridLeft\" \"gridRight\"',\n        gridGap: theme.spacing(2),\n        [theme.breakpoints.up('md')]: {\n            gridTemplateColumns: '3fr 2fr',\n            gridTemplateRows: '1fr',\n            gridTemplateAreas: '\"gridLeft gridRight\"',\n        },\n    },\n    singleField: {\n        padding: theme.spacing(2, 0, 0, 0),\n        display: 'flex',\n        alignItems: 'center',\n    },\n    firstname: { gridArea: 'gridLeft' },\n    lastname: { gridArea: 'gridRight' },\n    email: { gridArea: 'gridLeft' },\n    phone: { gridArea: 'gridRight' },\n    city: { gridArea: 'gridLeft' },\n    state: { gridArea: 'gridRight' },\n    yourOrder: {\n        paddingBottom: theme.spacing(2),\n    },\n    listItems: {\n        paddingBottom: theme.spacing(2),\n    },\n    item: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        padding: theme.spacing(1, 0, 0, 0),\n    },\n    itemTitle: {\n        maxWidth: '230px',\n        display: 'inline-block',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n    },\n    price: {\n        width: theme.spacing(8),\n        color: theme.palette.text.blur,\n    },\n    totalPrice: {\n        width: theme.spacing(10),\n    },\n    paymentButton: {\n        width: '100%',\n        backgroundColor: theme.palette.sidebarHeader.main,\n        color: LIGHT_WHITE,\n        '&:hover': {\n            color: theme.palette.text.main,\n            backgroundColor: theme.palette.background.main,\n        },\n    },\n    textfield: {\n        \n    },\n    textfieldInput: {\n        color: theme.palette.text.main,\n    },\n    textfieldLabel: {\n        color: theme.palette.text.blur,\n    },\n    inputAdornment: {\n        color: theme.palette.text.main,\n    },\n    link: {\n        textDecoration: \"none\",\n        color: theme.palette.text.main,\n        marginLeft: theme.spacing(3),\n        '&:hover': { cursor: 'pointer' }, \n    },\n    paymentBox: {\n        position: \"relative\",\n        width: \"100%\",\n        border: \"solid 1px\",\n        padding: theme.spacing(1, 2, 1, 2),\n    },\n    creditImages: {\n        position: \"absolute\",\n        top: theme.spacing(7),\n        right: theme.spacing(2),\n        [theme.breakpoints.down(\"sm\")]: {\n            display: 'none',\n        }\n    },\n    creditImage: {\n        width: '50px',\n        marginLeft: theme.spacing(1),\n    },\n    paypalImage: {\n        position: \"absolute\",\n        width: \"50px\",\n        bottom: theme.spacing(1),\n        right: theme.spacing(2),\n    },\n    circularProgress: {\n        color: theme.palette.orangeBlue.main,\n    },\n    paymentError: {\n        textAlign: \"center\",\n        paddingTop: theme.spacing(1),\n    },\n    orderCompleted: {\n        position: \"relative\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n    formComplete: {\n        borderRadius: theme.spacing(1.25),\n        margin: theme.spacing(15, 0, 15, 0),\n        height: \"330px\",\n        [theme.breakpoints.up(\"sm\")]: {\n            height: \"65vh\",\n        },\n        [theme.breakpoints.up(\"md\")]: {\n            margin: theme.spacing(5, 0, 5, 0),\n        },\n    },\n    goHomeLink: {\n        position: \"absolute\",\n        width: \"88px\", height: \"27px\",\n        left: \"50%\", top: \"67%\",\n        transform: \"translateX(-44%)\",\n        [theme.breakpoints.up(\"sm\")]: {\n            width: \"160px\", height: \"40px\",\n            left: \"50%\", top: \"71%\",\n            transform: \"translateX(-43%)\",\n        },\n        [theme.breakpoints.up(\"md\")]: {\n            width: \"160px\", height: \"40px\",\n            left: \"50%\", top: \"76%\",\n            transform: \"translateX(-44%)\",\n        },\n    },\n    goHomeButton: {\n        width: \"100%\",\n        height: \"100%\",\n        borderRadius: \"15px\",\n    },\n    attribute: {\n        color: theme.palette.text.main,\n        textDecoration: 'none',\n    },\n}))\n\nexport default useStyles;","/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/OrderProcess/StripeInput.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/utils/stripeAPI.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/Product/styles.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/Home/styles.js",[],"/home/atticusfinchiph/Codes/atticus-literature/frontend/src/app/pages/Bookstore/styles.js",[],{"ruleId":"262","replacedBy":"263"},{"ruleId":"264","replacedBy":"265"},{"ruleId":"266","severity":1,"message":"267","line":13,"column":8,"nodeType":"268","messageId":"269","endLine":13,"endColumn":20},{"ruleId":"270","severity":1,"message":"271","line":226,"column":8,"nodeType":"272","endLine":226,"endColumn":10,"suggestions":"273"},{"ruleId":"266","severity":1,"message":"274","line":29,"column":22,"nodeType":"268","messageId":"269","endLine":29,"endColumn":30},{"ruleId":"270","severity":1,"message":"275","line":47,"column":8,"nodeType":"272","endLine":47,"endColumn":16,"suggestions":"276"},{"ruleId":"270","severity":1,"message":"275","line":161,"column":8,"nodeType":"272","endLine":161,"endColumn":16,"suggestions":"277"},{"ruleId":"270","severity":1,"message":"278","line":292,"column":8,"nodeType":"272","endLine":292,"endColumn":18,"suggestions":"279"},{"ruleId":"270","severity":1,"message":"280","line":105,"column":23,"nodeType":"281","endLine":105,"endColumn":49},{"ruleId":"270","severity":1,"message":"271","line":58,"column":8,"nodeType":"272","endLine":58,"endColumn":19,"suggestions":"282"},{"ruleId":"266","severity":1,"message":"283","line":6,"column":8,"nodeType":"268","messageId":"269","endLine":6,"endColumn":12},{"ruleId":"266","severity":1,"message":"284","line":8,"column":72,"nodeType":"268","messageId":"269","endLine":8,"endColumn":82},{"ruleId":"266","severity":1,"message":"285","line":26,"column":70,"nodeType":"268","messageId":"269","endLine":26,"endColumn":85},{"ruleId":"266","severity":1,"message":"286","line":38,"column":11,"nodeType":"268","messageId":"269","endLine":38,"endColumn":22},{"ruleId":"270","severity":1,"message":"287","line":44,"column":8,"nodeType":"272","endLine":44,"endColumn":50,"suggestions":"288"},{"ruleId":"270","severity":1,"message":"289","line":47,"column":8,"nodeType":"272","endLine":47,"endColumn":20,"suggestions":"290"},{"ruleId":"270","severity":1,"message":"271","line":237,"column":8,"nodeType":"272","endLine":237,"endColumn":25,"suggestions":"291"},{"ruleId":"270","severity":1,"message":"292","line":249,"column":8,"nodeType":"272","endLine":249,"endColumn":23,"suggestions":"293"},{"ruleId":"270","severity":1,"message":"294","line":260,"column":8,"nodeType":"272","endLine":260,"endColumn":22,"suggestions":"295"},{"ruleId":"270","severity":1,"message":"296","line":268,"column":8,"nodeType":"272","endLine":268,"endColumn":35,"suggestions":"297"},{"ruleId":"270","severity":1,"message":"289","line":272,"column":8,"nodeType":"272","endLine":272,"endColumn":20,"suggestions":"298"},{"ruleId":"266","severity":1,"message":"299","line":3,"column":10,"nodeType":"268","messageId":"269","endLine":3,"endColumn":21},{"ruleId":"270","severity":1,"message":"271","line":57,"column":8,"nodeType":"272","endLine":57,"endColumn":10,"suggestions":"300"},{"ruleId":"266","severity":1,"message":"301","line":3,"column":23,"nodeType":"268","messageId":"269","endLine":3,"endColumn":32},{"ruleId":"266","severity":1,"message":"302","line":11,"column":7,"nodeType":"268","messageId":"269","endLine":11,"endColumn":17},{"ruleId":"270","severity":1,"message":"271","line":15,"column":8,"nodeType":"272","endLine":15,"endColumn":10,"suggestions":"303"},{"ruleId":"266","severity":1,"message":"304","line":2,"column":10,"nodeType":"268","messageId":"269","endLine":2,"endColumn":20},{"ruleId":"266","severity":1,"message":"305","line":4,"column":10,"nodeType":"268","messageId":"269","endLine":4,"endColumn":21},{"ruleId":"270","severity":1,"message":"306","line":41,"column":8,"nodeType":"272","endLine":41,"endColumn":18,"suggestions":"307"},{"ruleId":"266","severity":1,"message":"308","line":64,"column":21,"nodeType":"268","messageId":"269","endLine":64,"endColumn":26},{"ruleId":"270","severity":1,"message":"306","line":43,"column":8,"nodeType":"272","endLine":43,"endColumn":18,"suggestions":"309"},{"ruleId":"310","severity":1,"message":"311","line":86,"column":52,"nodeType":"312","messageId":"313","endLine":86,"endColumn":54},{"ruleId":"266","severity":1,"message":"314","line":2,"column":23,"nodeType":"268","messageId":"269","endLine":2,"endColumn":33},"no-native-reassign",["315"],"no-negated-in-lhs",["316"],"no-unused-vars","'FavoriteIcon' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["317"],"'userInfo' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'clearErrors' and 'intl'. Either include them or remove the dependency array.",["318"],["319"],"React Hook useEffect has a missing dependency: 'handleClose'. Either include it or remove the dependency array.",["320"],"Assignments to the 'searchArray' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression",["321"],"'clsx' is defined but never used.","'Typography' is defined but never used.","'shippingFeeInfo' is assigned a value but never used.","'handleReset' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["322"],"React Hook useEffect has a missing dependency: 'setCartOpen'. Either include it or remove the dependency array.",["323"],["324"],"React Hook useEffect has missing dependencies: 'dispatch', 'selectedCountry.isoCode', and 'selectedCountry?.name?.length'. Either include them or remove the dependency array.",["325"],"React Hook useEffect has missing dependencies: 'dispatch', 'selectedCountry.isoCode', and 'selectedState.isoCode'. Either include them or remove the dependency array.",["326"],"React Hook useEffect has a missing dependency: 'shippingFeeLoading'. Either include it or remove the dependency array.",["327"],["328"],"'LIGHT_WHITE' is defined but never used.",["329"],"'DARK_BLUE' is defined but never used.","'authConfig' is assigned a value but never used.",["330"],"'useContext' is defined but never used.","'useDispatch' is defined but never used.","React Hook useEffect has missing dependencies: 'activeStep' and 'history'. Either include them or remove the dependency array.",["331"],"'order' is assigned a value but never used.",["332"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'DARK_BLACK' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"333","fix":"334"},{"desc":"335","fix":"336"},{"desc":"335","fix":"337"},{"desc":"338","fix":"339"},{"desc":"340","fix":"341"},{"desc":"342","fix":"343"},{"desc":"344","fix":"345"},{"desc":"346","fix":"347"},{"desc":"348","fix":"349"},{"desc":"350","fix":"351"},{"desc":"352","fix":"353"},{"desc":"344","fix":"354"},{"desc":"333","fix":"355"},{"desc":"333","fix":"356"},{"desc":"357","fix":"358"},{"desc":"357","fix":"359"},"Update the dependencies array to be: [dispatch]",{"range":"360","text":"361"},"Update the dependencies array to be: [clearErrors, errors, intl]",{"range":"362","text":"363"},{"range":"364","text":"363"},"Update the dependencies array to be: [handleClose, userInfo]",{"range":"365","text":"366"},"Update the dependencies array to be: [dispatch, productId]",{"range":"367","text":"368"},"Update the dependencies array to be: [city, state, country, shippingFeeLoading, history]",{"range":"369","text":"370"},"Update the dependencies array to be: [isCartOpen, setCartOpen]",{"range":"371","text":"372"},"Update the dependencies array to be: [dispatch, selectedCountry]",{"range":"373","text":"374"},"Update the dependencies array to be: [dispatch, selectedCountry.isoCode, selectedCountry?.name?.length, selectedState]",{"range":"375","text":"376"},"Update the dependencies array to be: [dispatch, selectedCity, selectedCountry.isoCode, selectedState.isoCode]",{"range":"377","text":"378"},"Update the dependencies array to be: [cartList, shippingFeeInfo, shippingFeeLoading]",{"range":"379","text":"380"},{"range":"381","text":"372"},{"range":"382","text":"361"},{"range":"383","text":"361"},"Update the dependencies array to be: [activeStep, cartList, history]",{"range":"384","text":"385"},{"range":"386","text":"385"},[7457,7459],"[dispatch]",[2186,2194],"[clearErrors, errors, intl]",[7659,7667],[13555,13565],"[handleClose, userInfo]",[2290,2301],"[dispatch, productId]",[1898,1940],"[city, state, country, shippingFeeLoading, history]",[2040,2052],"[isCartOpen, setCartOpen]",[9913,9930],"[dispatch, selectedCountry]",[10415,10430],"[dispatch, selectedCountry.isoCode, selectedCountry?.name?.length, selectedState]",[10783,10797],"[dispatch, selectedCity, selectedCountry.isoCode, selectedState.isoCode]",[11071,11098],"[cartList, shippingFeeInfo, shippingFeeLoading]",[11199,11211],[2383,2385],[515,517],[2079,2089],"[activeStep, cartList, history]",[2408,2418]]